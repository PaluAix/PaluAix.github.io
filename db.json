{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/A.ico","path":"A.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/A.svg","path":"images/A.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover00.png","path":"images/cover00.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/gitee.png","path":"images/gitee.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/github.png","path":"images/github.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo-tag-chart.png","path":"images/hexo-tag-chart.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo.png","path":"images/hexo.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/normal.cur","path":"images/normal.cur","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-3.6.0.min.js","path":"js/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.css","path":"css/fonts/remixicon.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.eot","path":"css/fonts/remixicon.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.svg","path":"css/fonts/remixicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff","path":"css/fonts/remixicon.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff2","path":"css/fonts/remixicon.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.ttf","path":"css/fonts/remixicon.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/FHQ非指针模板.md","hash":"ad41ee8f4cd424d9339a9e07c2bdee0ac0cf8bdc","modified":1697283974225},{"_id":"source/CNAME","hash":"cca024bad3c68b33ac9745281b2d7c8ced2c1299","modified":1696463860306},{"_id":"source/_posts/10-02T1物理题.md","hash":"b619e86905aa1b9963fad7b7183e31ac942d5ce4","modified":1696463860307},{"_id":"source/_posts/洛谷P3374的线段树解法.md","hash":"45616bdb368a044ef71a52334d59432ba079bf9e","modified":1696463860308},{"_id":"source/_posts/一本通-花神游历各国.md","hash":"fc6a75bb0c2d0100a79840a4fa07563e13ef71a0","modified":1696463860307},{"_id":"source/_posts/博客测试页.md","hash":"422c533d531fee76f878eba2841c0ae513793867","modified":1696495051711},{"_id":"source/_posts/线段树区间修改模板.md","hash":"3388cc41c9a22a4b7c8c63e256199d1054b88db2","modified":1696463860309},{"_id":"source/_posts/线段树区间乘法模板.md","hash":"9e0625e57bdaa04b75d1613fbe44ec6d8293fc8e","modified":1696463860309},{"_id":"source/_posts/线段树解决A-B问题.md","hash":"dd6acff3a4d12cb6f1fc83b10832f34d7aaf6092","modified":1696463860309},{"_id":"source/setu/index.md","hash":"207ca0ba783efba88c7830d3974c370138d5b4b4","modified":1696500713412},{"_id":"source/categories/index.md","hash":"0ae5a83f4d9f8e55c9b8f1f84138b83ea90815fa","modified":1696144642000},{"_id":"source/about/index.md","hash":"a058d2d1e585031df18d7e46d3a188fdc23040ac","modified":1696463860310},{"_id":"node_modules/hexo-theme-ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/.travis.yml","hash":"870fcd9eb33bc4269d53bc84ddc6f8a69db7c611","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/README.md","hash":"53be9bba4abd5f4d28ddc8b0a913317531cc4877","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/package.json","hash":"5424c8abe79bf3dde54dfbf64f6814b31379f97b","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/rollup.config.js","hash":"3d98bd1db1dcf2e0878b6fcbbbf8ff9c3da6d357","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/_config.yml","hash":"2292478e80d00482bdad444df499a1cf1d0b8ffb","modified":1696495736369},{"_id":"node_modules/hexo-theme-ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/layout.ejs","hash":"ad2222b1819f763cd981f72b8204a19cb0fa75ae","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/languages/en.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/languages/default.yml","hash":"1853255c243858cf9d26a589d7d26571e11ed5d1","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/languages/de.yml","hash":"2b7fa47fbe06f6928a43ea3b345ab3aeaa2cee81","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/languages/ja.yml","hash":"aea06ea7bcb439d2b84501924cdd092293ee891a","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/languages/es.yml","hash":"fc27661276313c1c539252517d664359cb286f8a","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/languages/fr.yml","hash":"3dac4d53b9b2a1b10c0273ce7472b2e76576dc5a","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/languages/ko.yml","hash":"00db39dd43875774088511b4d467dcb71f1ce8ac","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/languages/no.yml","hash":"fa4d2da9bb00ad0febc631afaf17f76aaa17e950","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/languages/pt.yml","hash":"fa0b3a4a01a0493f3ef402039e394a291a1251fd","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/languages/nl.yml","hash":"d619955fd9659a209c58f696ee2160dfe8c6ac41","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/languages/zh-CN.yml","hash":"edf1f8c164f3d166f94e213148e984fdfc3a7c85","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/languages/vi.yml","hash":"20f25fe0e9017d530a771687fe9d21353e034fff","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/languages/zh-TW.yml","hash":"750fba5314d340ddb00812fc17a608a084f04462","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/main.js","hash":"fcb7c6c5ffcfd72ba9bd55b475af8a0e74484634","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/languages/ru.yml","hash":"45edcadb57176d0b11a839055df1964da8ca08f9","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/404.html","hash":"fce8d48b2534f5ba5feb3a91e43813f8f85b07d8","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/after-footer.ejs","hash":"ec2dd8a5e55b99350d7606a4f4ba0918fd656116","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/A.ico","hash":"d220bdc384401e625bce323d586c2271d762c20b","modified":1696123396000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/ayer.ejs","hash":"84f5c967f5019f4964711f3edd408a7503702e58","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/archive.ejs","hash":"1da014dd52294e132bc91eb2f45f67264a41e059","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/float-btns.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/katex.ejs","hash":"bef830bc48db44c19bfa922d8ed5f6ee1e924ea7","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/article.ejs","hash":"ff1f8fd0dce22409038e72097a9582d1bbf4e6e0","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/lock.ejs","hash":"72ec0a339f98399c5141f4b3aca4cc8e8310f03a","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/mathjax.ejs","hash":"4d6b2bbe0d50f609a9d6e5d646d07f7ab29e8c66","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/head.ejs","hash":"38abac221b79d83fd8d3ec8ee0fba55ef162d148","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/scripts/events/index.js","hash":"2c84d99e881f5cd1ee8a406b595a4365f3aea41e","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/viewer.ejs","hash":"ba0639363016f5badd13fefd000ef967c6a4e47b","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source-src/js/ayer.js","hash":"a3d349fb8af029e710d064c15373163680da2d39","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/js/share.js","hash":"7c105c427d472d84bee2ef3f0a61efa4ac6d564f","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/css/custom.styl","hash":"32990e811ea6fba84673b6d7175c88a3b890b109","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_remixicon.styl","hash":"6e7671af612868b750f1dc195f2e7c1c34931800","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/style.styl","hash":"dd5f5d0fef358ea1eba3f782458f72e13f764bba","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/A.svg","hash":"be3afb59fabfb8fe00914460623c08235e588f11","modified":1696123246000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/normal.cur","hash":"b43fc1a1655b4dd2d17d8a4ab2d091c2e2b4bff8","modified":1678542730000},{"_id":"node_modules/hexo-theme-ayer/source/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom1.js","hash":"c97ea1f120dba2c6804d0420186ef5d6f2419b7c","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/js/clickBoom2.js","hash":"2bc7267652ec49cea5dc3a8bd470c7d5ec57c721","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/author.ejs","hash":"0e6c2862d75e5b21faf28a5cc3310d3515340287","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/busuanzi.ejs","hash":"895293405b2b3b19fe97d79f4a25e16bea153ae8","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/minivaline.ejs","hash":"c09ba80cfa41aaac17f0f7ff2586e73241adab20","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/clipboard.ejs","hash":"55f2fafe9c6a151eeee39d1a2556742ebe89b2a2","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/gitalk.ejs","hash":"9f0250bc192a59a8577ea3048c8f5eef91ac10ef","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/twikoo.ejs","hash":"1e591e7b71880ca0a1dd9ab9913aa67fdd91633a","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/scripts/events/lib/hello.js","hash":"058c73fa3900d143affb9cc7ea0b2105d3925915","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/scripts/events/lib/merge-configs.js","hash":"734aac9a53cf168ee51482b02b75954a2a3df150","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/valine.ejs","hash":"d5b568a3554f0d6572e7b232b8a0ab3ea81a1845","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/article.styl","hash":"659a35544b321a101f7cf114f0c9fdf2cc125625","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/ayer.styl","hash":"38187e5c88eaf1ea099f2ded56f1f60194c95ec4","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/navbar.styl","hash":"266df43ec4041226f1801719e873265b75fe6515","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source-src/css/_partial/tocbot.styl","hash":"130e29937aa750e63e8cf216934dbdd4ea95969f","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/screenshots/hexo-theme-ayer.png","hash":"4111670e622ce09837b6b9cc641782af75805079","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1696122320000},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/css/fonts/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1696122322000},{"_id":"node_modules/hexo-theme-ayer/source/images/cover00.png","hash":"cc122d16d2288a06979614352fbe5e887ffdeeb1","modified":1696248290756},{"_id":"public/atom.xml","hash":"f5e746836e42bd51f4fe261bbaf35ec6c3e97b2e","modified":1697283998632},{"_id":"public/search.xml","hash":"3c7c8b4ce66233f7ebf64f43c8e64a6b8439ffe3","modified":1697283973879},{"_id":"public/setu/index.html","hash":"1827be03c1e94fc50e8454f376f3085d14b94bce","modified":1697283973879},{"_id":"public/categories/index.html","hash":"093c45cc04121438fd9145bb6c00a70047a68aeb","modified":1697283973879},{"_id":"public/about/index.html","hash":"b7604963a7fa70fef42c434ac83e4f05e2553d9b","modified":1697283973879},{"_id":"public/posts/1.html","hash":"a0191a863cd36fb145e3454f721f9fb909b71990","modified":1697283973879},{"_id":"public/archives/index.html","hash":"06ef8667b7b8387ed922eab3bc6bd93ec6b49860","modified":1697283973879},{"_id":"public/archives/1997/index.html","hash":"19f1e4a7943742278d66205f345907ebd098e79c","modified":1697283973879},{"_id":"public/archives/1997/10/index.html","hash":"9584443361e57013e6390ec490121aabb04e4413","modified":1697283973879},{"_id":"public/archives/2023/index.html","hash":"277688c7bd2273aebd5b93810a75def3b16c97da","modified":1697283973879},{"_id":"public/archives/2023/10/index.html","hash":"3cbb76e25f9b662a167bd64bd8c13df2d80cd209","modified":1697283973879},{"_id":"public/categories/动态规划/index.html","hash":"93ca3b810713b72f9153f9db86ed509a121a0849","modified":1697283973879},{"_id":"public/categories/数据结构/index.html","hash":"5daff2016e7daafc52ba01429261f3f8e6b65e8c","modified":1697283973879},{"_id":"public/categories/测试/index.html","hash":"7173fc1498e190025d94628eadd5f47b22fb7838","modified":1697283973879},{"_id":"public/posts/63159.html","hash":"bd071679d44864c074aeeba71861737d39b0e039","modified":1697283973879},{"_id":"public/posts/7.html","hash":"cd127bb626dd648899fb4b6bcb92113338b7e28e","modified":1697283973879},{"_id":"public/posts/6.html","hash":"ab8a3e9dbb219ca4bbbd562c9251b6e3ee92732a","modified":1697283973879},{"_id":"public/posts/5.html","hash":"a6a6848b13cbf9bb994f99f10d488757aba22d73","modified":1697283973879},{"_id":"public/posts/4.html","hash":"512145bc3d235dd35264712819d4c49042717161","modified":1697283973879},{"_id":"public/posts/3.html","hash":"ae9ee9f331561b8e1b7eea6bbe6d4f64b893bda8","modified":1697283973879},{"_id":"public/posts/2.html","hash":"5d0919ea767943bfbee5777dae2abc26774d0494","modified":1697283973879},{"_id":"public/index.html","hash":"99b1c27fbfe18cbee899e00d032470fa8f77460d","modified":1697283973879},{"_id":"public/CNAME","hash":"cca024bad3c68b33ac9745281b2d7c8ced2c1299","modified":1697283973879},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1697283973879},{"_id":"public/A.ico","hash":"d220bdc384401e625bce323d586c2271d762c20b","modified":1697283973879},{"_id":"public/images/A.svg","hash":"be3afb59fabfb8fe00914460623c08235e588f11","modified":1697283973879},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1697283973879},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1697283973879},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1697283973879},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1697283973879},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1697283973879},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1697283973879},{"_id":"public/images/gitee.png","hash":"250da578e0bd1393f22737f58d0fbae95119e527","modified":1697283973879},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1697283973879},{"_id":"public/images/hexo-tag-chart.png","hash":"6db432aae30556d151c2fd2c1d11015d9309ba81","modified":1697283973879},{"_id":"public/images/hexo.png","hash":"6b0315fba8a8f496491079b361e2fb5253e19a04","modified":1697283973879},{"_id":"public/images/normal.cur","hash":"b43fc1a1655b4dd2d17d8a4ab2d091c2e2b4bff8","modified":1697283973879},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1697283973879},{"_id":"public/images/github.png","hash":"4853ff37f9d859e7faa77675632a73f8ef089a15","modified":1697283973879},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1697283973879},{"_id":"public/css/fonts/remixicon.woff","hash":"8d6a423fd373c0a1f45b927d37f8f932aaea21ec","modified":1697283973879},{"_id":"public/css/fonts/remixicon.woff2","hash":"d83e667e2d8583bcd2d97b4ebe13ff1f147b947c","modified":1697283973879},{"_id":"public/404.html","hash":"155c674062d18ab392fa47ac837dd7afe77f8a56","modified":1697283973879},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1697283973879},{"_id":"public/dist/main.js","hash":"436093b4310b4656fb1e60ae946d04b85d6b1fa5","modified":1697283973879},{"_id":"public/css/custom.css","hash":"9b2a0d1ef0d7b29d7f16fbb73244b6d0bf925475","modified":1697283973879},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1697283973879},{"_id":"public/js/clickBoom1.js","hash":"afd4a981d3a56c40898248152009d478a3cd0d1e","modified":1697283973879},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1697283973879},{"_id":"public/js/clickBoom2.js","hash":"d3fe9e8c7046bec9745628f61d61e4102171ac2b","modified":1697283973879},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1697283973879},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1697283973879},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1697283973879},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1697283973879},{"_id":"public/dist/main.css","hash":"1f49cde949291ed86277d30721a7e728a4f8671a","modified":1697283973879},{"_id":"public/js/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1697283973879},{"_id":"public/css/fonts/remixicon.css","hash":"be1956502b9cf5081091ff78d7f11cd7ea733be8","modified":1697283973879},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1697283973879},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1697283973879},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1697283973879},{"_id":"public/css/fonts/remixicon.ttf","hash":"7eba83fb4482a63f3b338ccb6dca312e8e95db7f","modified":1697283973879},{"_id":"public/css/fonts/remixicon.eot","hash":"7e929b884b2201250fc49e8e79c3aba6cd9e4482","modified":1697283973879},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1697283973879},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1697283973879},{"_id":"public/css/fonts/remixicon.svg","hash":"94144debfb5761d37d79336a10ef674f82baec1b","modified":1697283973879},{"_id":"public/images/cover00.png","hash":"cc122d16d2288a06979614352fbe5e887ffdeeb1","modified":1697283973879}],"Category":[{"name":"动态规划","_id":"clnpz203k0003hkkf5l87dcel"},{"name":"数据结构","_id":"clnpz203r0008hkkfhkvqd9yh"},{"name":"测试","_id":"clnpz203u000jhkkfd937a7te"}],"Data":[],"Page":[{"title":"涩图","date":"2023-10-05T09:45:16.000Z","_content":"\n# ！警告\n\n- 本界面未显示在侧边栏中，请务必记住本页地址\n- 请勿传播，自己开心开心就得了\n\n\n\n## 点击[链接](https://api.nyan.xyz/httpapi/sexphoto/?r18=true)获得\n\n### 操作指示\n\n- 你将看到如下界面\n\n```json\n{\n    \"code\": \"...\",\n    \"message\": \"...\",\n    \"time\": ...,\n    \"version\": \"...\",\n    \"data\": {\n        \"num\": \"...\",\n        \"function\": \"...\",\n        \"url\": [\n            \"https://XXX.png\"\n        ]\n    }\n}\n```\n\n看到那个***XXX.png***了吗，这就是你要找的图片\n","source":"setu/index.md","raw":"---\ntitle: 涩图\ndate: 2023-10-05 17:45:16 \n---\n\n# ！警告\n\n- 本界面未显示在侧边栏中，请务必记住本页地址\n- 请勿传播，自己开心开心就得了\n\n\n\n## 点击[链接](https://api.nyan.xyz/httpapi/sexphoto/?r18=true)获得\n\n### 操作指示\n\n- 你将看到如下界面\n\n```json\n{\n    \"code\": \"...\",\n    \"message\": \"...\",\n    \"time\": ...,\n    \"version\": \"...\",\n    \"data\": {\n        \"num\": \"...\",\n        \"function\": \"...\",\n        \"url\": [\n            \"https://XXX.png\"\n        ]\n    }\n}\n```\n\n看到那个***XXX.png***了吗，这就是你要找的图片\n","updated":"2023-10-05T10:11:53.412Z","path":"setu/index.html","comments":1,"layout":"page","_id":"clnpz203f0000hkkf6yhjb87h","content":"<h1 id=\"！警告\"><a href=\"#！警告\" class=\"headerlink\" title=\"！警告\"></a>！警告</h1><ul>\n<li>本界面未显示在侧边栏中，请务必记住本页地址</li>\n<li>请勿传播，自己开心开心就得了</li>\n</ul>\n<h2 id=\"点击链接获得\"><a href=\"#点击链接获得\" class=\"headerlink\" title=\"点击链接获得\"></a>点击<a href=\"https://api.nyan.xyz/httpapi/sexphoto/?r18=true\">链接</a>获得</h2><h3 id=\"操作指示\"><a href=\"#操作指示\" class=\"headerlink\" title=\"操作指示\"></a>操作指示</h3><ul>\n<li>你将看到如下界面</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;...&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;...&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;time&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;...&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;num&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;...&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;function&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;...&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;https://XXX.png&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>看到那个<em><strong>XXX.png</strong></em>了吗，这就是你要找的图片</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"！警告\"><a href=\"#！警告\" class=\"headerlink\" title=\"！警告\"></a>！警告</h1><ul>\n<li>本界面未显示在侧边栏中，请务必记住本页地址</li>\n<li>请勿传播，自己开心开心就得了</li>\n</ul>\n<h2 id=\"点击链接获得\"><a href=\"#点击链接获得\" class=\"headerlink\" title=\"点击链接获得\"></a>点击<a href=\"https://api.nyan.xyz/httpapi/sexphoto/?r18=true\">链接</a>获得</h2><h3 id=\"操作指示\"><a href=\"#操作指示\" class=\"headerlink\" title=\"操作指示\"></a>操作指示</h3><ul>\n<li>你将看到如下界面</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;...&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;...&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;time&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;...&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;data&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;num&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;...&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;function&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;...&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;https://XXX.png&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>看到那个<em><strong>XXX.png</strong></em>了吗，这就是你要找的图片</p>\n"},{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2023-10-03T12:33:52.623Z","updated":"2023-10-01T07:17:22.000Z","path":"categories/index.html","comments":1,"_id":"clnpz203j0002hkkfflsxf7xk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","type":"about","_content":"\n### 关于博客\n\n- 博客是用基于**GitHub+Hexo**搭建的，速度慢很正常，请稍安勿躁\n- 博客主要上传一些题解，具体可以在【归档】中查看\n- 博客中的文章都有一定的分类，具体可以在【分类】中查看\n- 博客侧边栏底部有【搜索】，要善于使用\n- 博客右下角有【夜间模式】，晚上浏览可以打开\n\n------\n\n### 关于个人\n\n- 高中生，现役OIer\n- 【Aix】并没有什么特殊含义，这是我起网名的时候脸滚键盘~~取最后三个字母~~的产物\n- 代码码风很怪，将就着看吧\n- 其他的没什么了\n- **不玩**原神\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ntype: \"about\"\n---\n\n### 关于博客\n\n- 博客是用基于**GitHub+Hexo**搭建的，速度慢很正常，请稍安勿躁\n- 博客主要上传一些题解，具体可以在【归档】中查看\n- 博客中的文章都有一定的分类，具体可以在【分类】中查看\n- 博客侧边栏底部有【搜索】，要善于使用\n- 博客右下角有【夜间模式】，晚上浏览可以打开\n\n------\n\n### 关于个人\n\n- 高中生，现役OIer\n- 【Aix】并没有什么特殊含义，这是我起网名的时候脸滚键盘~~取最后三个字母~~的产物\n- 代码码风很怪，将就着看吧\n- 其他的没什么了\n- **不玩**原神\n\n","date":"2023-10-05T08:11:34.628Z","updated":"2023-10-04T23:57:40.310Z","path":"about/index.html","comments":1,"layout":"page","_id":"clnpz203l0004hkkfgdpi2bp4","content":"<h3 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h3><ul>\n<li>博客是用基于<strong>GitHub+Hexo</strong>搭建的，速度慢很正常，请稍安勿躁</li>\n<li>博客主要上传一些题解，具体可以在【归档】中查看</li>\n<li>博客中的文章都有一定的分类，具体可以在【分类】中查看</li>\n<li>博客侧边栏底部有【搜索】，要善于使用</li>\n<li>博客右下角有【夜间模式】，晚上浏览可以打开</li>\n</ul>\n<hr>\n<h3 id=\"关于个人\"><a href=\"#关于个人\" class=\"headerlink\" title=\"关于个人\"></a>关于个人</h3><ul>\n<li>高中生，现役OIer</li>\n<li>【Aix】并没有什么特殊含义，这是我起网名的时候脸滚键盘<del>取最后三个字母</del>的产物</li>\n<li>代码码风很怪，将就着看吧</li>\n<li>其他的没什么了</li>\n<li><strong>不玩</strong>原神</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h3><ul>\n<li>博客是用基于<strong>GitHub+Hexo</strong>搭建的，速度慢很正常，请稍安勿躁</li>\n<li>博客主要上传一些题解，具体可以在【归档】中查看</li>\n<li>博客中的文章都有一定的分类，具体可以在【分类】中查看</li>\n<li>博客侧边栏底部有【搜索】，要善于使用</li>\n<li>博客右下角有【夜间模式】，晚上浏览可以打开</li>\n</ul>\n<hr>\n<h3 id=\"关于个人\"><a href=\"#关于个人\" class=\"headerlink\" title=\"关于个人\"></a>关于个人</h3><ul>\n<li>高中生，现役OIer</li>\n<li>【Aix】并没有什么特殊含义，这是我起网名的时候脸滚键盘<del>取最后三个字母</del>的产物</li>\n<li>代码码风很怪，将就着看吧</li>\n<li>其他的没什么了</li>\n<li><strong>不玩</strong>原神</li>\n</ul>\n"}],"Post":[{"title":"10.02T1物理题","date":"2023-10-01T22:06:35.000Z","abbrlink":3,"_content":"\n# 题目描述\n\n物理课上，Enos正在做电学实验。Enos有一排灯座，总共可以接M个小灯泡。他还有N种小灯泡，每种小灯泡标有额定功率Pi，不同的小灯泡额定功率不同。为了使接通电源后灯座上的灯泡由暗到亮变化，要求小灯泡要按额定功率从小到大接。为避免接通电源后发光序列过于单调，规定不能有超过ai只连续的第i种小灯泡。不过Enos发现，在灯座上已经固定了一些小灯泡，它们无法被取下来。现在 Enos想知道，在电源接通下一共能有多少种不同的发光序列?可以不用某种小灯泡，但总共接入的小灯泡数必须恰为M。\n\n# 格式\n\n## 输入\n\n第一行两个正整数N,M，分别表示小灯泡的个数和灯座上的接口数。接下来N行，每行两个正整数Pi,ai，含义如上描述。 接下来一行个M整数bi，如果bi为0表示第i个接口没有小灯泡，否则表示第i个接口已经固定有一只第bi种的小灯泡。\n\n## 输出\n\n一行一个整数表示不同的发光序列数。由于答案可能很大，你只需要输出答案除以1 000 000 007的余数即可。如果没有一种可行的方案，输出一行-1。\n\n# 样例\n\n## 输入数据 1\n\n```input\n2 4\n40 3\n60 2\n0 0 1 0\n```\n\n## 输出数据 1\n\n```output\n1\n```\n\n# 数据范围与约定\n\n对于 20% 的数据，N,M,ai≤ 10;\n\n对于 50% 的数据，N，M,ai ≤ 20;\n\n对于 100% 的数据，0<N,M,ai<100 ,0<Pi<=10 000 , 0<=bi<=N;\n\n均匀分布着 20% 的数据，bi= 0。\n\n# 题解\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nint n, m, b[105], vis[105];\nconst int mod = 1000000007;\ninline int read() {\n  char c = getchar();\n  int x = 0, f = 1;\n  while (c < '0' || c > '9') {\n    if (c == '-') f = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = x * 10 + c - '0';\n    c = getchar();\n  }\n  return x * f;\n}\nstruct node {\n  int power, max, flag;\n} light[105];\nbool cmp(node a, node b) { return a.power < b.power; }\nsigned main() {\n  // freopen(\"physics.in\", \"r\", stdin);\n  // freopen(\"physics.out\", \"w\", stdout);\n  n = read(), m = read();\n  for (int i = 1; i <= n; i++) {\n    light[i].power = read(), light[i].max = read();\n    light[i].flag = i;\n  }\n  for (int i = 1; i <= m; i++) b[i] = read();\n  sort(light + 1, light + n + 1, cmp);\n  vis[0] = 1;\n  for (int i = 1; i <= n; i++) {\n    for (int j = m - 1; j >= 0; j--)\n      if (vis[j]) {\n        for (int k = 1; k <= light[i].max; k++) {\n          if (j + k > m) break;\n          if (b[j + k] && b[j + k] != light[i].flag) break;\n          vis[j + k] += vis[j];\n          vis[j + k] = vis[j + k] % mod;\n        }\n      }\n  }\n  if (vis[m] == 0)\n    printf(\"-1\");\n  else\n    printf(\"%lld\", vis[m]);\n  return 0;\n}\n```","source":"_posts/10-02T1物理题.md","raw":"---\ntitle: 10.02T1物理题\ndate: 2023-10-02 06:06:35\nabbrlink: 3\ncategories: 动态规划\n---\n\n# 题目描述\n\n物理课上，Enos正在做电学实验。Enos有一排灯座，总共可以接M个小灯泡。他还有N种小灯泡，每种小灯泡标有额定功率Pi，不同的小灯泡额定功率不同。为了使接通电源后灯座上的灯泡由暗到亮变化，要求小灯泡要按额定功率从小到大接。为避免接通电源后发光序列过于单调，规定不能有超过ai只连续的第i种小灯泡。不过Enos发现，在灯座上已经固定了一些小灯泡，它们无法被取下来。现在 Enos想知道，在电源接通下一共能有多少种不同的发光序列?可以不用某种小灯泡，但总共接入的小灯泡数必须恰为M。\n\n# 格式\n\n## 输入\n\n第一行两个正整数N,M，分别表示小灯泡的个数和灯座上的接口数。接下来N行，每行两个正整数Pi,ai，含义如上描述。 接下来一行个M整数bi，如果bi为0表示第i个接口没有小灯泡，否则表示第i个接口已经固定有一只第bi种的小灯泡。\n\n## 输出\n\n一行一个整数表示不同的发光序列数。由于答案可能很大，你只需要输出答案除以1 000 000 007的余数即可。如果没有一种可行的方案，输出一行-1。\n\n# 样例\n\n## 输入数据 1\n\n```input\n2 4\n40 3\n60 2\n0 0 1 0\n```\n\n## 输出数据 1\n\n```output\n1\n```\n\n# 数据范围与约定\n\n对于 20% 的数据，N,M,ai≤ 10;\n\n对于 50% 的数据，N，M,ai ≤ 20;\n\n对于 100% 的数据，0<N,M,ai<100 ,0<Pi<=10 000 , 0<=bi<=N;\n\n均匀分布着 20% 的数据，bi= 0。\n\n# 题解\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nint n, m, b[105], vis[105];\nconst int mod = 1000000007;\ninline int read() {\n  char c = getchar();\n  int x = 0, f = 1;\n  while (c < '0' || c > '9') {\n    if (c == '-') f = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = x * 10 + c - '0';\n    c = getchar();\n  }\n  return x * f;\n}\nstruct node {\n  int power, max, flag;\n} light[105];\nbool cmp(node a, node b) { return a.power < b.power; }\nsigned main() {\n  // freopen(\"physics.in\", \"r\", stdin);\n  // freopen(\"physics.out\", \"w\", stdout);\n  n = read(), m = read();\n  for (int i = 1; i <= n; i++) {\n    light[i].power = read(), light[i].max = read();\n    light[i].flag = i;\n  }\n  for (int i = 1; i <= m; i++) b[i] = read();\n  sort(light + 1, light + n + 1, cmp);\n  vis[0] = 1;\n  for (int i = 1; i <= n; i++) {\n    for (int j = m - 1; j >= 0; j--)\n      if (vis[j]) {\n        for (int k = 1; k <= light[i].max; k++) {\n          if (j + k > m) break;\n          if (b[j + k] && b[j + k] != light[i].flag) break;\n          vis[j + k] += vis[j];\n          vis[j + k] = vis[j + k] % mod;\n        }\n      }\n  }\n  if (vis[m] == 0)\n    printf(\"-1\");\n  else\n    printf(\"%lld\", vis[m]);\n  return 0;\n}\n```","slug":"10-02T1物理题","published":1,"updated":"2023-10-04T23:57:40.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnpz203h0001hkkf332c4jk5","content":"<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>物理课上，Enos正在做电学实验。Enos有一排灯座，总共可以接M个小灯泡。他还有N种小灯泡，每种小灯泡标有额定功率Pi，不同的小灯泡额定功率不同。为了使接通电源后灯座上的灯泡由暗到亮变化，要求小灯泡要按额定功率从小到大接。为避免接通电源后发光序列过于单调，规定不能有超过ai只连续的第i种小灯泡。不过Enos发现，在灯座上已经固定了一些小灯泡，它们无法被取下来。现在 Enos想知道，在电源接通下一共能有多少种不同的发光序列?可以不用某种小灯泡，但总共接入的小灯泡数必须恰为M。</p>\n<h1 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h1><h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>第一行两个正整数N,M，分别表示小灯泡的个数和灯座上的接口数。接下来N行，每行两个正整数Pi,ai，含义如上描述。 接下来一行个M整数bi，如果bi为0表示第i个接口没有小灯泡，否则表示第i个接口已经固定有一只第bi种的小灯泡。</p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>一行一个整数表示不同的发光序列数。由于答案可能很大，你只需要输出答案除以1 000 000 007的余数即可。如果没有一种可行的方案，输出一行-1。</p>\n<h1 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h1><h2 id=\"输入数据-1\"><a href=\"#输入数据-1\" class=\"headerlink\" title=\"输入数据 1\"></a>输入数据 1</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 4</span><br><span class=\"line\">40 3</span><br><span class=\"line\">60 2</span><br><span class=\"line\">0 0 1 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出数据-1\"><a href=\"#输出数据-1\" class=\"headerlink\" title=\"输出数据 1\"></a>输出数据 1</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据范围与约定\"><a href=\"#数据范围与约定\" class=\"headerlink\" title=\"数据范围与约定\"></a>数据范围与约定</h1><p>对于 20% 的数据，N,M,ai≤ 10;</p>\n<p>对于 50% 的数据，N，M,ai ≤ 20;</p>\n<p>对于 100% 的数据，0&lt;N,M,ai&lt;100 ,0&lt;Pi&lt;&#x3D;10 000 , 0&lt;&#x3D;bi&lt;&#x3D;N;</p>\n<p>均匀分布着 20% 的数据，bi&#x3D; 0。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, b[<span class=\"number\">105</span>], vis[<span class=\"number\">105</span>];</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod = <span class=\"number\">1000000007</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> power, max, flag;</span><br><span class=\"line\">&#125; light[<span class=\"number\">105</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(node a, node b)</span> </span>&#123; <span class=\"keyword\">return</span> a.power &lt; b.power; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// freopen(&quot;physics.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class=\"line\">  <span class=\"comment\">// freopen(&quot;physics.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class=\"line\">  n = <span class=\"built_in\">read</span>(), m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    light[i].power = <span class=\"built_in\">read</span>(), light[i].max = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    light[i].flag = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) b[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">sort</span>(light + <span class=\"number\">1</span>, light + n + <span class=\"number\">1</span>, cmp);</span><br><span class=\"line\">  vis[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = m - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vis[j]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= light[i].max; k++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j + k &gt; m) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (b[j + k] &amp;&amp; b[j + k] != light[i].flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          vis[j + k] += vis[j];</span><br><span class=\"line\">          vis[j + k] = vis[j + k] % mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vis[m] == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>, vis[m]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>物理课上，Enos正在做电学实验。Enos有一排灯座，总共可以接M个小灯泡。他还有N种小灯泡，每种小灯泡标有额定功率Pi，不同的小灯泡额定功率不同。为了使接通电源后灯座上的灯泡由暗到亮变化，要求小灯泡要按额定功率从小到大接。为避免接通电源后发光序列过于单调，规定不能有超过ai只连续的第i种小灯泡。不过Enos发现，在灯座上已经固定了一些小灯泡，它们无法被取下来。现在 Enos想知道，在电源接通下一共能有多少种不同的发光序列?可以不用某种小灯泡，但总共接入的小灯泡数必须恰为M。</p>\n<h1 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h1><h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>第一行两个正整数N,M，分别表示小灯泡的个数和灯座上的接口数。接下来N行，每行两个正整数Pi,ai，含义如上描述。 接下来一行个M整数bi，如果bi为0表示第i个接口没有小灯泡，否则表示第i个接口已经固定有一只第bi种的小灯泡。</p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>一行一个整数表示不同的发光序列数。由于答案可能很大，你只需要输出答案除以1 000 000 007的余数即可。如果没有一种可行的方案，输出一行-1。</p>\n<h1 id=\"样例\"><a href=\"#样例\" class=\"headerlink\" title=\"样例\"></a>样例</h1><h2 id=\"输入数据-1\"><a href=\"#输入数据-1\" class=\"headerlink\" title=\"输入数据 1\"></a>输入数据 1</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 4</span><br><span class=\"line\">40 3</span><br><span class=\"line\">60 2</span><br><span class=\"line\">0 0 1 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"输出数据-1\"><a href=\"#输出数据-1\" class=\"headerlink\" title=\"输出数据 1\"></a>输出数据 1</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据范围与约定\"><a href=\"#数据范围与约定\" class=\"headerlink\" title=\"数据范围与约定\"></a>数据范围与约定</h1><p>对于 20% 的数据，N,M,ai≤ 10;</p>\n<p>对于 50% 的数据，N，M,ai ≤ 20;</p>\n<p>对于 100% 的数据，0&lt;N,M,ai&lt;100 ,0&lt;Pi&lt;&#x3D;10 000 , 0&lt;&#x3D;bi&lt;&#x3D;N;</p>\n<p>均匀分布着 20% 的数据，bi&#x3D; 0。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, b[<span class=\"number\">105</span>], vis[<span class=\"number\">105</span>];</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod = <span class=\"number\">1000000007</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> power, max, flag;</span><br><span class=\"line\">&#125; light[<span class=\"number\">105</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(node a, node b)</span> </span>&#123; <span class=\"keyword\">return</span> a.power &lt; b.power; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// freopen(&quot;physics.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class=\"line\">  <span class=\"comment\">// freopen(&quot;physics.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class=\"line\">  n = <span class=\"built_in\">read</span>(), m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    light[i].power = <span class=\"built_in\">read</span>(), light[i].max = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    light[i].flag = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) b[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">sort</span>(light + <span class=\"number\">1</span>, light + n + <span class=\"number\">1</span>, cmp);</span><br><span class=\"line\">  vis[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = m - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vis[j]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= light[i].max; k++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j + k &gt; m) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (b[j + k] &amp;&amp; b[j + k] != light[i].flag) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          vis[j + k] += vis[j];</span><br><span class=\"line\">          vis[j + k] = vis[j + k] % mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vis[m] == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>, vis[m]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"FHQ_Treap非指针模板","abbrlink":63159,"date":"2023-10-14T11:42:31.000Z","_content":"\n# 【模板】普通平衡树\n\n## 题目描述\n\n您需要写一种数据结构（可参考题目标题），来维护一些数，其中需要提供以下操作：\n\n1. 插入 $x$ 数\n2. 删除 $x$ 数(若有多个相同的数，应只删除一个)\n3. 查询 $x$ 数的排名(排名定义为比当前数小的数的个数 $+1$ )\n4. 查询排名为 $x$ 的数\n5. 求 $x$ 的前驱(前驱定义为小于 $x$，且最大的数)\n6. 求 $x$ 的后继(后继定义为大于 $x$，且最小的数)\n\n## 输入格式\n\n第一行为 $n$，表示操作的个数,下面 $n$ 行每行有两个数 $\\text{opt}$ 和 $x$，$\\text{opt}$ 表示操作的序号( $ 1 \\leq \\text{opt} \\leq 6 $ )\n\n## 输出格式\n\n对于操作 $3,4,5,6$ 每行输出一个数，表示对应答案\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n10\n1 106465\n4 1\n1 317721\n1 460929\n1 644985\n1 84185\n1 89851\n6 81968\n1 492737\n5 493598\n```\n\n### 样例输出 #1\n\n```\n106465\n84185\n492737\n```\n\n## 提示\n\n【数据范围】  \n对于 $100\\%$ 的数据，$1\\le n \\le 10^5$，$|x| \\le 10^7$\n\n# 题解\n\n```cpp\n#include <bits/stdc++.h>\n#define LC(p) t[p].c[0]\n#define RC(p) t[p].c[1]\nusing namespace std;\n\nconst int N = 1e6 + 10;\nstruct FHQ_Treap {\n  int val, size, dat, cnt, c[2];\n} t[N];\n\nint tot, root, a, b, c;\n\nvoid Push(int p) { t[p].size = t[LC(p)].size + t[RC(p)].size + 1; }\n\nvoid Split(int p, int k, int &a, int &b) {\n  if (!p) {\n    a = b = 0;\n    return;\n  }\n  if (t[p].val <= k) {\n    a = p;\n    Split(RC(p), k, RC(p), b);\n  } else {\n    b = p;\n    Split(LC(p), k, a, LC(p));\n  }\n  Push(p);\n}\n\nint Merge(int x, int y) {\n  if (!x || !y) return x + y;\n  if (t[x].dat <= t[y].dat) {\n    RC(x) = Merge(RC(x), y);\n    Push(x);\n    return x;\n  } else {\n    LC(y) = Merge(x, LC(y));\n    Push(y);\n    return y;\n  }\n}\n\nvoid Insert(int k) {\n  t[++tot].val = k;\n  t[tot].size = 1;\n  t[tot].dat = rand();\n  Split(root, k, a, b);\n  root = Merge(Merge(a, tot), b);\n}\n\nvoid Remove(int k) {\n  Split(root, k, a, b);\n  Split(a, k - 1, a, c);\n  c = Merge(LC(c), RC(c));\n  root = Merge(Merge(a, c), b);\n}\n\nint GetRank(int k) {\n  Split(root, k - 1, a, b);\n  int ans = t[a].size + 1;\n  root = Merge(a, b);\n  return ans;\n}\n\nint GetVal(int p, int k) {\n  if (k == t[LC(p)].size + 1) return t[p].val;\n  if (k <= t[LC(p)].size)\n    return GetVal(LC(p), k);\n  else\n    return GetVal(RC(p), k - t[LC(p)].size - 1);\n}\n\nint Pre(int p) { return GetVal(root, GetRank(p) - 1); }\nint Nex(int p) { return GetVal(root, GetRank(p + 1)); }\n\nint main() {\n  int n;\n  cin >> n;\n  while (n--) {\n    int opt, k;\n    cin >> opt >> k;\n    switch (opt) {\n      case 1:\n        Insert(k);\n        break;\n      case 2:\n        Remove(k);\n        break;\n      case 3:\n        cout << GetRank(k) << endl;\n        break;\n      case 4:\n        cout << GetVal(root, k) << endl;\n        break;\n      case 5:\n        cout << Pre(k) << endl;\n        break;\n      case 6:\n        cout << Nex(k) << endl;\n        break;\n    }\n  }\n  system(\"pause\");\n  return 0;\n}\n```\n\n码风自认为最好看的一次（笑\n\n","source":"_posts/FHQ非指针模板.md","raw":"---\ntitle: FHQ_Treap非指针模板\nabbrlink: 63159\ncategories: 数据结构\ndate: 2023-10-14 19:42:31\n---\n\n# 【模板】普通平衡树\n\n## 题目描述\n\n您需要写一种数据结构（可参考题目标题），来维护一些数，其中需要提供以下操作：\n\n1. 插入 $x$ 数\n2. 删除 $x$ 数(若有多个相同的数，应只删除一个)\n3. 查询 $x$ 数的排名(排名定义为比当前数小的数的个数 $+1$ )\n4. 查询排名为 $x$ 的数\n5. 求 $x$ 的前驱(前驱定义为小于 $x$，且最大的数)\n6. 求 $x$ 的后继(后继定义为大于 $x$，且最小的数)\n\n## 输入格式\n\n第一行为 $n$，表示操作的个数,下面 $n$ 行每行有两个数 $\\text{opt}$ 和 $x$，$\\text{opt}$ 表示操作的序号( $ 1 \\leq \\text{opt} \\leq 6 $ )\n\n## 输出格式\n\n对于操作 $3,4,5,6$ 每行输出一个数，表示对应答案\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n10\n1 106465\n4 1\n1 317721\n1 460929\n1 644985\n1 84185\n1 89851\n6 81968\n1 492737\n5 493598\n```\n\n### 样例输出 #1\n\n```\n106465\n84185\n492737\n```\n\n## 提示\n\n【数据范围】  \n对于 $100\\%$ 的数据，$1\\le n \\le 10^5$，$|x| \\le 10^7$\n\n# 题解\n\n```cpp\n#include <bits/stdc++.h>\n#define LC(p) t[p].c[0]\n#define RC(p) t[p].c[1]\nusing namespace std;\n\nconst int N = 1e6 + 10;\nstruct FHQ_Treap {\n  int val, size, dat, cnt, c[2];\n} t[N];\n\nint tot, root, a, b, c;\n\nvoid Push(int p) { t[p].size = t[LC(p)].size + t[RC(p)].size + 1; }\n\nvoid Split(int p, int k, int &a, int &b) {\n  if (!p) {\n    a = b = 0;\n    return;\n  }\n  if (t[p].val <= k) {\n    a = p;\n    Split(RC(p), k, RC(p), b);\n  } else {\n    b = p;\n    Split(LC(p), k, a, LC(p));\n  }\n  Push(p);\n}\n\nint Merge(int x, int y) {\n  if (!x || !y) return x + y;\n  if (t[x].dat <= t[y].dat) {\n    RC(x) = Merge(RC(x), y);\n    Push(x);\n    return x;\n  } else {\n    LC(y) = Merge(x, LC(y));\n    Push(y);\n    return y;\n  }\n}\n\nvoid Insert(int k) {\n  t[++tot].val = k;\n  t[tot].size = 1;\n  t[tot].dat = rand();\n  Split(root, k, a, b);\n  root = Merge(Merge(a, tot), b);\n}\n\nvoid Remove(int k) {\n  Split(root, k, a, b);\n  Split(a, k - 1, a, c);\n  c = Merge(LC(c), RC(c));\n  root = Merge(Merge(a, c), b);\n}\n\nint GetRank(int k) {\n  Split(root, k - 1, a, b);\n  int ans = t[a].size + 1;\n  root = Merge(a, b);\n  return ans;\n}\n\nint GetVal(int p, int k) {\n  if (k == t[LC(p)].size + 1) return t[p].val;\n  if (k <= t[LC(p)].size)\n    return GetVal(LC(p), k);\n  else\n    return GetVal(RC(p), k - t[LC(p)].size - 1);\n}\n\nint Pre(int p) { return GetVal(root, GetRank(p) - 1); }\nint Nex(int p) { return GetVal(root, GetRank(p + 1)); }\n\nint main() {\n  int n;\n  cin >> n;\n  while (n--) {\n    int opt, k;\n    cin >> opt >> k;\n    switch (opt) {\n      case 1:\n        Insert(k);\n        break;\n      case 2:\n        Remove(k);\n        break;\n      case 3:\n        cout << GetRank(k) << endl;\n        break;\n      case 4:\n        cout << GetVal(root, k) << endl;\n        break;\n      case 5:\n        cout << Pre(k) << endl;\n        break;\n      case 6:\n        cout << Nex(k) << endl;\n        break;\n    }\n  }\n  system(\"pause\");\n  return 0;\n}\n```\n\n码风自认为最好看的一次（笑\n\n","slug":"FHQ非指针模板","published":1,"updated":"2023-10-14T11:46:14.225Z","_id":"clnpz203q0006hkkf88kra979","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"【模板】普通平衡树\"><a href=\"#【模板】普通平衡树\" class=\"headerlink\" title=\"【模板】普通平衡树\"></a>【模板】普通平衡树</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>您需要写一种数据结构（可参考题目标题），来维护一些数，其中需要提供以下操作：</p>\n<ol>\n<li>插入 $x$ 数</li>\n<li>删除 $x$ 数(若有多个相同的数，应只删除一个)</li>\n<li>查询 $x$ 数的排名(排名定义为比当前数小的数的个数 $+1$ )</li>\n<li>查询排名为 $x$ 的数</li>\n<li>求 $x$ 的前驱(前驱定义为小于 $x$，且最大的数)</li>\n<li>求 $x$ 的后继(后继定义为大于 $x$，且最小的数)</li>\n</ol>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行为 $n$，表示操作的个数,下面 $n$ 行每行有两个数 $\\text{opt}$ 和 $x$，$\\text{opt}$ 表示操作的序号( $ 1 \\leq \\text{opt} \\leq 6 $ )</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>对于操作 $3,4,5,6$ 每行输出一个数，表示对应答案</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">1 106465</span><br><span class=\"line\">4 1</span><br><span class=\"line\">1 317721</span><br><span class=\"line\">1 460929</span><br><span class=\"line\">1 644985</span><br><span class=\"line\">1 84185</span><br><span class=\"line\">1 89851</span><br><span class=\"line\">6 81968</span><br><span class=\"line\">1 492737</span><br><span class=\"line\">5 493598</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">106465</span><br><span class=\"line\">84185</span><br><span class=\"line\">492737</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>【数据范围】<br>对于 $100%$ 的数据，$1\\le n \\le 10^5$，$|x| \\le 10^7$</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LC(p) t[p].c[0]</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RC(p) t[p].c[1]</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FHQ_Treap</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> val, size, dat, cnt, c[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125; t[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> tot, root, a, b, c;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Push</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> </span>&#123; t[p].size = t[<span class=\"built_in\">LC</span>(p)].size + t[<span class=\"built_in\">RC</span>(p)].size + <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Split</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> k, <span class=\"type\">int</span> &amp;a, <span class=\"type\">int</span> &amp;b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!p) &#123;</span><br><span class=\"line\">    a = b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[p].val &lt;= k) &#123;</span><br><span class=\"line\">    a = p;</span><br><span class=\"line\">    <span class=\"built_in\">Split</span>(<span class=\"built_in\">RC</span>(p), k, <span class=\"built_in\">RC</span>(p), b);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    b = p;</span><br><span class=\"line\">    <span class=\"built_in\">Split</span>(<span class=\"built_in\">LC</span>(p), k, a, <span class=\"built_in\">LC</span>(p));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">Push</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Merge</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!x || !y) <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[x].dat &lt;= t[y].dat) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">RC</span>(x) = <span class=\"built_in\">Merge</span>(<span class=\"built_in\">RC</span>(x), y);</span><br><span class=\"line\">    <span class=\"built_in\">Push</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">LC</span>(y) = <span class=\"built_in\">Merge</span>(x, <span class=\"built_in\">LC</span>(y));</span><br><span class=\"line\">    <span class=\"built_in\">Push</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">  t[++tot].val = k;</span><br><span class=\"line\">  t[tot].size = <span class=\"number\">1</span>;</span><br><span class=\"line\">  t[tot].dat = <span class=\"built_in\">rand</span>();</span><br><span class=\"line\">  <span class=\"built_in\">Split</span>(root, k, a, b);</span><br><span class=\"line\">  root = <span class=\"built_in\">Merge</span>(<span class=\"built_in\">Merge</span>(a, tot), b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Remove</span><span class=\"params\">(<span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Split</span>(root, k, a, b);</span><br><span class=\"line\">  <span class=\"built_in\">Split</span>(a, k - <span class=\"number\">1</span>, a, c);</span><br><span class=\"line\">  c = <span class=\"built_in\">Merge</span>(<span class=\"built_in\">LC</span>(c), <span class=\"built_in\">RC</span>(c));</span><br><span class=\"line\">  root = <span class=\"built_in\">Merge</span>(<span class=\"built_in\">Merge</span>(a, c), b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetRank</span><span class=\"params\">(<span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Split</span>(root, k - <span class=\"number\">1</span>, a, b);</span><br><span class=\"line\">  <span class=\"type\">int</span> ans = t[a].size + <span class=\"number\">1</span>;</span><br><span class=\"line\">  root = <span class=\"built_in\">Merge</span>(a, b);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetVal</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k == t[<span class=\"built_in\">LC</span>(p)].size + <span class=\"number\">1</span>) <span class=\"keyword\">return</span> t[p].val;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt;= t[<span class=\"built_in\">LC</span>(p)].size)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GetVal</span>(<span class=\"built_in\">LC</span>(p), k);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GetVal</span>(<span class=\"built_in\">RC</span>(p), k - t[<span class=\"built_in\">LC</span>(p)].size - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Pre</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">GetVal</span>(root, <span class=\"built_in\">GetRank</span>(p) - <span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Nex</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">GetVal</span>(root, <span class=\"built_in\">GetRank</span>(p + <span class=\"number\">1</span>)); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> n;</span><br><span class=\"line\">  cin &gt;&gt; n;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> opt, k;</span><br><span class=\"line\">    cin &gt;&gt; opt &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (opt) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">Insert</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"built_in\">Remove</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">GetRank</span>(k) &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">GetVal</span>(root, k) &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">Pre</span>(k) &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">Nex</span>(k) &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>码风自认为最好看的一次（笑</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【模板】普通平衡树\"><a href=\"#【模板】普通平衡树\" class=\"headerlink\" title=\"【模板】普通平衡树\"></a>【模板】普通平衡树</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>您需要写一种数据结构（可参考题目标题），来维护一些数，其中需要提供以下操作：</p>\n<ol>\n<li>插入 $x$ 数</li>\n<li>删除 $x$ 数(若有多个相同的数，应只删除一个)</li>\n<li>查询 $x$ 数的排名(排名定义为比当前数小的数的个数 $+1$ )</li>\n<li>查询排名为 $x$ 的数</li>\n<li>求 $x$ 的前驱(前驱定义为小于 $x$，且最大的数)</li>\n<li>求 $x$ 的后继(后继定义为大于 $x$，且最小的数)</li>\n</ol>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行为 $n$，表示操作的个数,下面 $n$ 行每行有两个数 $\\text{opt}$ 和 $x$，$\\text{opt}$ 表示操作的序号( $ 1 \\leq \\text{opt} \\leq 6 $ )</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>对于操作 $3,4,5,6$ 每行输出一个数，表示对应答案</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">1 106465</span><br><span class=\"line\">4 1</span><br><span class=\"line\">1 317721</span><br><span class=\"line\">1 460929</span><br><span class=\"line\">1 644985</span><br><span class=\"line\">1 84185</span><br><span class=\"line\">1 89851</span><br><span class=\"line\">6 81968</span><br><span class=\"line\">1 492737</span><br><span class=\"line\">5 493598</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">106465</span><br><span class=\"line\">84185</span><br><span class=\"line\">492737</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>【数据范围】<br>对于 $100%$ 的数据，$1\\le n \\le 10^5$，$|x| \\le 10^7$</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LC(p) t[p].c[0]</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RC(p) t[p].c[1]</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FHQ_Treap</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> val, size, dat, cnt, c[<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125; t[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> tot, root, a, b, c;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Push</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> </span>&#123; t[p].size = t[<span class=\"built_in\">LC</span>(p)].size + t[<span class=\"built_in\">RC</span>(p)].size + <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Split</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> k, <span class=\"type\">int</span> &amp;a, <span class=\"type\">int</span> &amp;b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!p) &#123;</span><br><span class=\"line\">    a = b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[p].val &lt;= k) &#123;</span><br><span class=\"line\">    a = p;</span><br><span class=\"line\">    <span class=\"built_in\">Split</span>(<span class=\"built_in\">RC</span>(p), k, <span class=\"built_in\">RC</span>(p), b);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    b = p;</span><br><span class=\"line\">    <span class=\"built_in\">Split</span>(<span class=\"built_in\">LC</span>(p), k, a, <span class=\"built_in\">LC</span>(p));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">Push</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Merge</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!x || !y) <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[x].dat &lt;= t[y].dat) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">RC</span>(x) = <span class=\"built_in\">Merge</span>(<span class=\"built_in\">RC</span>(x), y);</span><br><span class=\"line\">    <span class=\"built_in\">Push</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">LC</span>(y) = <span class=\"built_in\">Merge</span>(x, <span class=\"built_in\">LC</span>(y));</span><br><span class=\"line\">    <span class=\"built_in\">Push</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Insert</span><span class=\"params\">(<span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">  t[++tot].val = k;</span><br><span class=\"line\">  t[tot].size = <span class=\"number\">1</span>;</span><br><span class=\"line\">  t[tot].dat = <span class=\"built_in\">rand</span>();</span><br><span class=\"line\">  <span class=\"built_in\">Split</span>(root, k, a, b);</span><br><span class=\"line\">  root = <span class=\"built_in\">Merge</span>(<span class=\"built_in\">Merge</span>(a, tot), b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Remove</span><span class=\"params\">(<span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Split</span>(root, k, a, b);</span><br><span class=\"line\">  <span class=\"built_in\">Split</span>(a, k - <span class=\"number\">1</span>, a, c);</span><br><span class=\"line\">  c = <span class=\"built_in\">Merge</span>(<span class=\"built_in\">LC</span>(c), <span class=\"built_in\">RC</span>(c));</span><br><span class=\"line\">  root = <span class=\"built_in\">Merge</span>(<span class=\"built_in\">Merge</span>(a, c), b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetRank</span><span class=\"params\">(<span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Split</span>(root, k - <span class=\"number\">1</span>, a, b);</span><br><span class=\"line\">  <span class=\"type\">int</span> ans = t[a].size + <span class=\"number\">1</span>;</span><br><span class=\"line\">  root = <span class=\"built_in\">Merge</span>(a, b);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">GetVal</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k == t[<span class=\"built_in\">LC</span>(p)].size + <span class=\"number\">1</span>) <span class=\"keyword\">return</span> t[p].val;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt;= t[<span class=\"built_in\">LC</span>(p)].size)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GetVal</span>(<span class=\"built_in\">LC</span>(p), k);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GetVal</span>(<span class=\"built_in\">RC</span>(p), k - t[<span class=\"built_in\">LC</span>(p)].size - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Pre</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">GetVal</span>(root, <span class=\"built_in\">GetRank</span>(p) - <span class=\"number\">1</span>); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Nex</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"built_in\">GetVal</span>(root, <span class=\"built_in\">GetRank</span>(p + <span class=\"number\">1</span>)); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> n;</span><br><span class=\"line\">  cin &gt;&gt; n;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n--) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> opt, k;</span><br><span class=\"line\">    cin &gt;&gt; opt &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (opt) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"built_in\">Insert</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"built_in\">Remove</span>(k);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">GetRank</span>(k) &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">GetVal</span>(root, k) &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">Pre</span>(k) &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">Nex</span>(k) &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>码风自认为最好看的一次（笑</p>\n"},{"title":"一本通-花神游历各国","date":"2023-10-04T03:41:52.000Z","abbrlink":7,"_content":"\n# 花神游历各国\n\n## 题目描述\n\n花神喜欢步行游历各国，顺便虐爆各地竞赛花神有一条游览路线，它是线型的，也就是说，所有游历国家呈一条线的形状排列，花神对每个国家都有一个喜欢程度（当然花神并不一定喜欢所有国家），每一次旅行中，花神会选择一条旅游路线，它在那一串国家中是连续的一段，这次旅行带来的开心值是这些国家的喜欢度的总和当然花神对这些国家的喜欢程度并不是恒定的，有时会突然对某些国家产生反感，使他对这些国家的喜欢度 $delta$ 变为 $\\sqrt{delta}$，也就是开根号（可能是花神虐爆了那些国家的 OI，从而感到乏味），现在给出花神每次的旅行路线，以及开心度的变化，请求出花神每次旅行的开心值。\n\n## 输入格式\n\n第一行是一个整数 $N$ 表示有 $N$ 个国家。  \n第二行有 $N$ 个空格隔开的整数，表示每个国家的初始喜欢度  $data_i$。  \n第三行是一个整数 $M$ 表示有 $M$ 条信息要处理。  \n第四行到最后,每行 $3$ 个整数，$x$，$l$，$r$，$ ( l \\le r ) $。当 $x=1$ 时询问游历国家 $l$ 到 $r$ 的开心值总和，也就是 $\\sum_{i=l}^{r} data_i$；当 $x=2$ 是国家 $l$ 到 $r$ 中每个国家的喜欢度 $delta = \\sqrt{delta}$。  \n注：建议使用sqrt函数，且向下取整。\n\n## 输出格式\n\n每次 $x=1$ 时，每行一个整数，表示这次旅行的开心度。\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n4\n1 100 5 5\n5\n1 1 2\n2 1 2\n1 1 2\n2 2 3\n1 1 4\n```\n\n### 样例输出 #1\n\n```\n101\n11\n11\n```\n\n## 提示\n\n对于 $100\\%$ 的数据：$n \\le 100000$，$m \\le 200000$，$data_i$ 非负且小于 $10^9$。\n\n# 题解\n\n> 线段树单点修改变式\n\n```cpp\n#include <bits/stdc++.h>\n#define LC p << 1\n#define RC p << 1 | 1\n#define int long long\nusing namespace std;\nconst int N = 1e6 + 5;\n//const int N = 1e5 + 5; 艹，这数据绝对有问题,1e5过不去1e6就能了，题目描述不是是n<=10^5吗？？？\ninline int IN() {\n  char c = getchar();\n  int x = 0, f = 1;\n  while (c < '0' || c > '9') {\n    if (c == '-') f = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = x * 10 + c - '0';\n    c = getchar();\n  }\n  return x * f;\n}\nstruct tree25 {\n  int val, l, r;\n} t[N * 4];\nint ma[N];\nvoid PushUp(int p) {\n  t[p].val = t[LC].val + t[RC].val;\n  ma[p] = max(ma[LC], ma[RC]);\n  return;\n}\nvoid Build(int p, int l, int r) {\n  if (l == r) {\n    t[p].val = ma[p] = IN();\n    return;\n  }\n  int mid = l + r >> 1;\n  Build(LC, l, mid);\n  Build(RC, mid + 1, r);\n  PushUp(p);\n}\nvoid Update(int p, int l, int r, int x, int y) {\n  if (ma[p] == 1 || ma[p] == 0) return;\n  if (l == r) {\n    ma[p] = t[p].val = sqrt(t[p].val);\n    return;\n  }\n  int mid = l + r >> 1;\n  if (x <= mid) Update(LC, l, mid, x, y);\n  if (mid < y) Update(RC, mid + 1, r, x, y);\n  PushUp(p);\n}\nint Ask(int p, int l, int r, int x, int y) {\n  if (x <= l && r <= y) return t[p].val;\n  int mid = l + r >> 1;\n  int res = 0;\n  if (x <= mid) res += Ask(LC, l, mid, x, y);\n  if (y > mid) res += Ask(RC, mid + 1, r, x, y);\n  return res;\n}\nsigned main() {\n  int n = IN();\n  Build(1, 1, n);\n  int q = IN();\n  for (int i = 1; i <= q; i++) {\n    int op = IN(), a = IN(), b = IN();\n    if (op == 1)\n      cout << Ask(1, 1, n, a, b) << endl;\n    else\n      Update(1, 1, n, a, b);\n  }\n  system(\"pause\");\n  return 0;\n}\n```\n\n","source":"_posts/一本通-花神游历各国.md","raw":"---\ntitle: 一本通-花神游历各国\ndate: 2023-10-04 11:41:52\nabbrlink: 7\ncategories: 数据结构\n---\n\n# 花神游历各国\n\n## 题目描述\n\n花神喜欢步行游历各国，顺便虐爆各地竞赛花神有一条游览路线，它是线型的，也就是说，所有游历国家呈一条线的形状排列，花神对每个国家都有一个喜欢程度（当然花神并不一定喜欢所有国家），每一次旅行中，花神会选择一条旅游路线，它在那一串国家中是连续的一段，这次旅行带来的开心值是这些国家的喜欢度的总和当然花神对这些国家的喜欢程度并不是恒定的，有时会突然对某些国家产生反感，使他对这些国家的喜欢度 $delta$ 变为 $\\sqrt{delta}$，也就是开根号（可能是花神虐爆了那些国家的 OI，从而感到乏味），现在给出花神每次的旅行路线，以及开心度的变化，请求出花神每次旅行的开心值。\n\n## 输入格式\n\n第一行是一个整数 $N$ 表示有 $N$ 个国家。  \n第二行有 $N$ 个空格隔开的整数，表示每个国家的初始喜欢度  $data_i$。  \n第三行是一个整数 $M$ 表示有 $M$ 条信息要处理。  \n第四行到最后,每行 $3$ 个整数，$x$，$l$，$r$，$ ( l \\le r ) $。当 $x=1$ 时询问游历国家 $l$ 到 $r$ 的开心值总和，也就是 $\\sum_{i=l}^{r} data_i$；当 $x=2$ 是国家 $l$ 到 $r$ 中每个国家的喜欢度 $delta = \\sqrt{delta}$。  \n注：建议使用sqrt函数，且向下取整。\n\n## 输出格式\n\n每次 $x=1$ 时，每行一个整数，表示这次旅行的开心度。\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n4\n1 100 5 5\n5\n1 1 2\n2 1 2\n1 1 2\n2 2 3\n1 1 4\n```\n\n### 样例输出 #1\n\n```\n101\n11\n11\n```\n\n## 提示\n\n对于 $100\\%$ 的数据：$n \\le 100000$，$m \\le 200000$，$data_i$ 非负且小于 $10^9$。\n\n# 题解\n\n> 线段树单点修改变式\n\n```cpp\n#include <bits/stdc++.h>\n#define LC p << 1\n#define RC p << 1 | 1\n#define int long long\nusing namespace std;\nconst int N = 1e6 + 5;\n//const int N = 1e5 + 5; 艹，这数据绝对有问题,1e5过不去1e6就能了，题目描述不是是n<=10^5吗？？？\ninline int IN() {\n  char c = getchar();\n  int x = 0, f = 1;\n  while (c < '0' || c > '9') {\n    if (c == '-') f = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = x * 10 + c - '0';\n    c = getchar();\n  }\n  return x * f;\n}\nstruct tree25 {\n  int val, l, r;\n} t[N * 4];\nint ma[N];\nvoid PushUp(int p) {\n  t[p].val = t[LC].val + t[RC].val;\n  ma[p] = max(ma[LC], ma[RC]);\n  return;\n}\nvoid Build(int p, int l, int r) {\n  if (l == r) {\n    t[p].val = ma[p] = IN();\n    return;\n  }\n  int mid = l + r >> 1;\n  Build(LC, l, mid);\n  Build(RC, mid + 1, r);\n  PushUp(p);\n}\nvoid Update(int p, int l, int r, int x, int y) {\n  if (ma[p] == 1 || ma[p] == 0) return;\n  if (l == r) {\n    ma[p] = t[p].val = sqrt(t[p].val);\n    return;\n  }\n  int mid = l + r >> 1;\n  if (x <= mid) Update(LC, l, mid, x, y);\n  if (mid < y) Update(RC, mid + 1, r, x, y);\n  PushUp(p);\n}\nint Ask(int p, int l, int r, int x, int y) {\n  if (x <= l && r <= y) return t[p].val;\n  int mid = l + r >> 1;\n  int res = 0;\n  if (x <= mid) res += Ask(LC, l, mid, x, y);\n  if (y > mid) res += Ask(RC, mid + 1, r, x, y);\n  return res;\n}\nsigned main() {\n  int n = IN();\n  Build(1, 1, n);\n  int q = IN();\n  for (int i = 1; i <= q; i++) {\n    int op = IN(), a = IN(), b = IN();\n    if (op == 1)\n      cout << Ask(1, 1, n, a, b) << endl;\n    else\n      Update(1, 1, n, a, b);\n  }\n  system(\"pause\");\n  return 0;\n}\n```\n\n","slug":"一本通-花神游历各国","published":1,"updated":"2023-10-04T23:57:40.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnpz203q0007hkkfgjldgyor","content":"<h1 id=\"花神游历各国\"><a href=\"#花神游历各国\" class=\"headerlink\" title=\"花神游历各国\"></a>花神游历各国</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>花神喜欢步行游历各国，顺便虐爆各地竞赛花神有一条游览路线，它是线型的，也就是说，所有游历国家呈一条线的形状排列，花神对每个国家都有一个喜欢程度（当然花神并不一定喜欢所有国家），每一次旅行中，花神会选择一条旅游路线，它在那一串国家中是连续的一段，这次旅行带来的开心值是这些国家的喜欢度的总和当然花神对这些国家的喜欢程度并不是恒定的，有时会突然对某些国家产生反感，使他对这些国家的喜欢度 $delta$ 变为 $\\sqrt{delta}$，也就是开根号（可能是花神虐爆了那些国家的 OI，从而感到乏味），现在给出花神每次的旅行路线，以及开心度的变化，请求出花神每次旅行的开心值。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行是一个整数 $N$ 表示有 $N$ 个国家。<br>第二行有 $N$ 个空格隔开的整数，表示每个国家的初始喜欢度  $data_i$。<br>第三行是一个整数 $M$ 表示有 $M$ 条信息要处理。<br>第四行到最后,每行 $3$ 个整数，$x$，$l$，$r$，$ ( l \\le r ) $。当 $x&#x3D;1$ 时询问游历国家 $l$ 到 $r$ 的开心值总和，也就是 $\\sum_{i&#x3D;l}^{r} data_i$；当 $x&#x3D;2$ 是国家 $l$ 到 $r$ 中每个国家的喜欢度 $delta &#x3D; \\sqrt{delta}$。<br>注：建议使用sqrt函数，且向下取整。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>每次 $x&#x3D;1$ 时，每行一个整数，表示这次旅行的开心度。</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1 100 5 5</span><br><span class=\"line\">5</span><br><span class=\"line\">1 1 2</span><br><span class=\"line\">2 1 2</span><br><span class=\"line\">1 1 2</span><br><span class=\"line\">2 2 3</span><br><span class=\"line\">1 1 4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">101</span><br><span class=\"line\">11</span><br><span class=\"line\">11</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>对于 $100%$ 的数据：$n \\le 100000$，$m \\le 200000$，$data_i$ 非负且小于 $10^9$。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><blockquote>\n<p>线段树单点修改变式</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LC p &lt;&lt; 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RC p &lt;&lt; 1 | 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">//const int N = 1e5 + 5; 艹，这数据绝对有问题,1e5过不去1e6就能了，题目描述不是是n&lt;=10^5吗？？？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">IN</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree25</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> val, l, r;</span><br><span class=\"line\">&#125; t[N * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> ma[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PushUp</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">  t[p].val = t[LC].val + t[RC].val;</span><br><span class=\"line\">  ma[p] = <span class=\"built_in\">max</span>(ma[LC], ma[RC]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Build</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">    t[p].val = ma[p] = <span class=\"built_in\">IN</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">Build</span>(LC, l, mid);</span><br><span class=\"line\">  <span class=\"built_in\">Build</span>(RC, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">  <span class=\"built_in\">PushUp</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ma[p] == <span class=\"number\">1</span> || ma[p] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">    ma[p] = t[p].val = <span class=\"built_in\">sqrt</span>(t[p].val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt;= mid) <span class=\"built_in\">Update</span>(LC, l, mid, x, y);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mid &lt; y) <span class=\"built_in\">Update</span>(RC, mid + <span class=\"number\">1</span>, r, x, y);</span><br><span class=\"line\">  <span class=\"built_in\">PushUp</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Ask</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt;= l &amp;&amp; r &lt;= y) <span class=\"keyword\">return</span> t[p].val;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt;= mid) res += <span class=\"built_in\">Ask</span>(LC, l, mid, x, y);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (y &gt; mid) res += <span class=\"built_in\">Ask</span>(RC, mid + <span class=\"number\">1</span>, r, x, y);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> n = <span class=\"built_in\">IN</span>();</span><br><span class=\"line\">  <span class=\"built_in\">Build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">  <span class=\"type\">int</span> q = <span class=\"built_in\">IN</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> op = <span class=\"built_in\">IN</span>(), a = <span class=\"built_in\">IN</span>(), b = <span class=\"built_in\">IN</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>)</span><br><span class=\"line\">      cout &lt;&lt; <span class=\"built_in\">Ask</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, a, b) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"built_in\">Update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, a, b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"花神游历各国\"><a href=\"#花神游历各国\" class=\"headerlink\" title=\"花神游历各国\"></a>花神游历各国</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>花神喜欢步行游历各国，顺便虐爆各地竞赛花神有一条游览路线，它是线型的，也就是说，所有游历国家呈一条线的形状排列，花神对每个国家都有一个喜欢程度（当然花神并不一定喜欢所有国家），每一次旅行中，花神会选择一条旅游路线，它在那一串国家中是连续的一段，这次旅行带来的开心值是这些国家的喜欢度的总和当然花神对这些国家的喜欢程度并不是恒定的，有时会突然对某些国家产生反感，使他对这些国家的喜欢度 $delta$ 变为 $\\sqrt{delta}$，也就是开根号（可能是花神虐爆了那些国家的 OI，从而感到乏味），现在给出花神每次的旅行路线，以及开心度的变化，请求出花神每次旅行的开心值。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行是一个整数 $N$ 表示有 $N$ 个国家。<br>第二行有 $N$ 个空格隔开的整数，表示每个国家的初始喜欢度  $data_i$。<br>第三行是一个整数 $M$ 表示有 $M$ 条信息要处理。<br>第四行到最后,每行 $3$ 个整数，$x$，$l$，$r$，$ ( l \\le r ) $。当 $x&#x3D;1$ 时询问游历国家 $l$ 到 $r$ 的开心值总和，也就是 $\\sum_{i&#x3D;l}^{r} data_i$；当 $x&#x3D;2$ 是国家 $l$ 到 $r$ 中每个国家的喜欢度 $delta &#x3D; \\sqrt{delta}$。<br>注：建议使用sqrt函数，且向下取整。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>每次 $x&#x3D;1$ 时，每行一个整数，表示这次旅行的开心度。</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1 100 5 5</span><br><span class=\"line\">5</span><br><span class=\"line\">1 1 2</span><br><span class=\"line\">2 1 2</span><br><span class=\"line\">1 1 2</span><br><span class=\"line\">2 2 3</span><br><span class=\"line\">1 1 4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">101</span><br><span class=\"line\">11</span><br><span class=\"line\">11</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>对于 $100%$ 的数据：$n \\le 100000$，$m \\le 200000$，$data_i$ 非负且小于 $10^9$。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><blockquote>\n<p>线段树单点修改变式</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LC p &lt;&lt; 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RC p &lt;&lt; 1 | 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">//const int N = 1e5 + 5; 艹，这数据绝对有问题,1e5过不去1e6就能了，题目描述不是是n&lt;=10^5吗？？？</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">IN</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">tree25</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> val, l, r;</span><br><span class=\"line\">&#125; t[N * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> ma[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PushUp</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">  t[p].val = t[LC].val + t[RC].val;</span><br><span class=\"line\">  ma[p] = <span class=\"built_in\">max</span>(ma[LC], ma[RC]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Build</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">    t[p].val = ma[p] = <span class=\"built_in\">IN</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">Build</span>(LC, l, mid);</span><br><span class=\"line\">  <span class=\"built_in\">Build</span>(RC, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">  <span class=\"built_in\">PushUp</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Update</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ma[p] == <span class=\"number\">1</span> || ma[p] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">    ma[p] = t[p].val = <span class=\"built_in\">sqrt</span>(t[p].val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt;= mid) <span class=\"built_in\">Update</span>(LC, l, mid, x, y);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mid &lt; y) <span class=\"built_in\">Update</span>(RC, mid + <span class=\"number\">1</span>, r, x, y);</span><br><span class=\"line\">  <span class=\"built_in\">PushUp</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Ask</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt;= l &amp;&amp; r &lt;= y) <span class=\"keyword\">return</span> t[p].val;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt;= mid) res += <span class=\"built_in\">Ask</span>(LC, l, mid, x, y);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (y &gt; mid) res += <span class=\"built_in\">Ask</span>(RC, mid + <span class=\"number\">1</span>, r, x, y);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> n = <span class=\"built_in\">IN</span>();</span><br><span class=\"line\">  <span class=\"built_in\">Build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">  <span class=\"type\">int</span> q = <span class=\"built_in\">IN</span>();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> op = <span class=\"built_in\">IN</span>(), a = <span class=\"built_in\">IN</span>(), b = <span class=\"built_in\">IN</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>)</span><br><span class=\"line\">      cout &lt;&lt; <span class=\"built_in\">Ask</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, a, b) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"built_in\">Update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, a, b);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"洛谷P3374的线段树解法","date":"2023-10-01T07:30:20.000Z","abbrlink":2,"_content":"# P3374\n\n## 题目描述\n\n如题，已知一个数列，你需要进行下面两种操作：\n\n- 将某一个数加上 $x$\n\n- 求出某区间每一个数的和\n\n## 输入格式\n\n第一行包含两个正整数 $n,m$，分别表示该数列数字的个数和操作的总个数。   \n\n第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。\n\n接下来 $m$ 行每行包含 $3$ 个整数，表示一个操作，具体如下：\n\n- `1 x k`  含义：将第 $x$ 个数加上 $k$\n\n- `2 x y`  含义：输出区间 $[x,y]$ 内每个数的和\n\n## 输出格式\n\n输出包含若干行整数，即为所有操作 $2$ 的结果。\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n5 5\n1 5 4 2 3\n1 1 3\n2 2 5\n1 3 -1\n1 4 2\n2 1 4\n```\n\n### 样例输出 #1\n\n```\n14\n16\n```\n\n## 提示\n\n【数据范围】\n\n对于 $30\\%$ 的数据，$1 \\le n \\le 8$，$1\\le m \\le 10$；   \n对于 $70\\%$ 的数据，$1\\le n,m \\le 10^4$；   \n对于 $100\\%$ 的数据，$1\\le n,m \\le 5\\times 10^5$。\n\n数据保证对于任意时刻，$a$ 的任意子区间（包括长度为 $1$ 和 $n$ 的子区间）和均在 $[-2^{31}, 2^{31})$ 范围内。\n\n\n样例说明：\n\n ![](https://cdn.luogu.com.cn/upload/pic/2256.png) \n\n故输出结果14、16\n\n# 题解\n\n**很明显，这是一道树状数组的模板题，但由于某神奇原因无法AC，故使用线段树来解。**\n\nAC代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define LC pos * 2\n#define RC pos * 2 + 1\nusing namespace std;\nconst int N = 5e5+5;\ninline int read()\n{\n    char c = getchar();\n    int x = 0, f = 1;\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n            f = -1;\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        x = x * 10 + c - '0';\n        c = getchar();\n    }\n    return x * f;\n}\nstruct node\n{\n    int left, right, val;\n} tree[N * 4];\nvoid build(int pos, int left, int right)\n{\n    tree[pos].left = left;\n    tree[pos].right = right;\n    if (left == right)\n    {\n        tree[pos].val = read();\n        return;\n    }\n    int mid = (left + right) / 2;\n    build(LC, left, mid);\n    build(RC, mid + 1, right);\n    tree[pos].val = tree[LC].val + tree[RC].val;\n}\nvoid point_add(int pos, int x, int v)\n{\n    int left = tree[pos].left, right = tree[pos].right;\n    if (left == right)\n    {\n        tree[pos].val += v;\n        return;\n    }\n    int mid = (left + right) / 2;\n    if (x <= mid)\n        point_add(LC, x, v);\n    else\n        point_add(RC, x, v);\n    tree[pos].val = tree[LC].val + tree[RC].val;\n}\nint ask(int pos, int left, int right)\n{\n    if (tree[pos].left >= left && tree[pos].right <= right)\n        return tree[pos].val;\n    int mid = (tree[pos].left + tree[pos].right) / 2;\n    int ans = 0;\n    if (left <= mid)\n        ans += ask(LC, left, right);\n    if (right > mid)\n        ans += ask(RC, left, right);\n    return ans;\n}\nsigned main()\n{\n    int n = read(), m = read();\n    build(1, 1, n);\n    for (int i = 1; i <= m; i++)\n    {\n        int k = read(), a = read(), b = read();\n        if (k == 1)\n            point_add(1, a, b);\n        else\n            printf(\"%lld\\n\", ask(1, a, b));\n    }\n\n    system(\"pause\");\n    return 0;\n}\n```\n\n![AC](https://cdn.luogu.com.cn/upload/image_hosting/bvm7mvcf.png)\n","source":"_posts/洛谷P3374的线段树解法.md","raw":"---\ntitle: 洛谷P3374的线段树解法\ndate: 2023-10-01 15:30:20\nabbrlink: 2\ncategories: 数据结构\n---\n# P3374\n\n## 题目描述\n\n如题，已知一个数列，你需要进行下面两种操作：\n\n- 将某一个数加上 $x$\n\n- 求出某区间每一个数的和\n\n## 输入格式\n\n第一行包含两个正整数 $n,m$，分别表示该数列数字的个数和操作的总个数。   \n\n第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。\n\n接下来 $m$ 行每行包含 $3$ 个整数，表示一个操作，具体如下：\n\n- `1 x k`  含义：将第 $x$ 个数加上 $k$\n\n- `2 x y`  含义：输出区间 $[x,y]$ 内每个数的和\n\n## 输出格式\n\n输出包含若干行整数，即为所有操作 $2$ 的结果。\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n5 5\n1 5 4 2 3\n1 1 3\n2 2 5\n1 3 -1\n1 4 2\n2 1 4\n```\n\n### 样例输出 #1\n\n```\n14\n16\n```\n\n## 提示\n\n【数据范围】\n\n对于 $30\\%$ 的数据，$1 \\le n \\le 8$，$1\\le m \\le 10$；   \n对于 $70\\%$ 的数据，$1\\le n,m \\le 10^4$；   \n对于 $100\\%$ 的数据，$1\\le n,m \\le 5\\times 10^5$。\n\n数据保证对于任意时刻，$a$ 的任意子区间（包括长度为 $1$ 和 $n$ 的子区间）和均在 $[-2^{31}, 2^{31})$ 范围内。\n\n\n样例说明：\n\n ![](https://cdn.luogu.com.cn/upload/pic/2256.png) \n\n故输出结果14、16\n\n# 题解\n\n**很明显，这是一道树状数组的模板题，但由于某神奇原因无法AC，故使用线段树来解。**\n\nAC代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define LC pos * 2\n#define RC pos * 2 + 1\nusing namespace std;\nconst int N = 5e5+5;\ninline int read()\n{\n    char c = getchar();\n    int x = 0, f = 1;\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n            f = -1;\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        x = x * 10 + c - '0';\n        c = getchar();\n    }\n    return x * f;\n}\nstruct node\n{\n    int left, right, val;\n} tree[N * 4];\nvoid build(int pos, int left, int right)\n{\n    tree[pos].left = left;\n    tree[pos].right = right;\n    if (left == right)\n    {\n        tree[pos].val = read();\n        return;\n    }\n    int mid = (left + right) / 2;\n    build(LC, left, mid);\n    build(RC, mid + 1, right);\n    tree[pos].val = tree[LC].val + tree[RC].val;\n}\nvoid point_add(int pos, int x, int v)\n{\n    int left = tree[pos].left, right = tree[pos].right;\n    if (left == right)\n    {\n        tree[pos].val += v;\n        return;\n    }\n    int mid = (left + right) / 2;\n    if (x <= mid)\n        point_add(LC, x, v);\n    else\n        point_add(RC, x, v);\n    tree[pos].val = tree[LC].val + tree[RC].val;\n}\nint ask(int pos, int left, int right)\n{\n    if (tree[pos].left >= left && tree[pos].right <= right)\n        return tree[pos].val;\n    int mid = (tree[pos].left + tree[pos].right) / 2;\n    int ans = 0;\n    if (left <= mid)\n        ans += ask(LC, left, right);\n    if (right > mid)\n        ans += ask(RC, left, right);\n    return ans;\n}\nsigned main()\n{\n    int n = read(), m = read();\n    build(1, 1, n);\n    for (int i = 1; i <= m; i++)\n    {\n        int k = read(), a = read(), b = read();\n        if (k == 1)\n            point_add(1, a, b);\n        else\n            printf(\"%lld\\n\", ask(1, a, b));\n    }\n\n    system(\"pause\");\n    return 0;\n}\n```\n\n![AC](https://cdn.luogu.com.cn/upload/image_hosting/bvm7mvcf.png)\n","slug":"洛谷P3374的线段树解法","published":1,"updated":"2023-10-04T23:57:40.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnpz203r0009hkkf6dheg2q8","content":"<h1 id=\"P3374\"><a href=\"#P3374\" class=\"headerlink\" title=\"P3374\"></a>P3374</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>如题，已知一个数列，你需要进行下面两种操作：</p>\n<ul>\n<li><p>将某一个数加上 $x$</p>\n</li>\n<li><p>求出某区间每一个数的和</p>\n</li>\n</ul>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行包含两个正整数 $n,m$，分别表示该数列数字的个数和操作的总个数。   </p>\n<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>\n<p>接下来 $m$ 行每行包含 $3$ 个整数，表示一个操作，具体如下：</p>\n<ul>\n<li><p><code>1 x k</code>  含义：将第 $x$ 个数加上 $k$</p>\n</li>\n<li><p><code>2 x y</code>  含义：输出区间 $[x,y]$ 内每个数的和</p>\n</li>\n</ul>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出包含若干行整数，即为所有操作 $2$ 的结果。</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 5</span><br><span class=\"line\">1 5 4 2 3</span><br><span class=\"line\">1 1 3</span><br><span class=\"line\">2 2 5</span><br><span class=\"line\">1 3 -1</span><br><span class=\"line\">1 4 2</span><br><span class=\"line\">2 1 4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14</span><br><span class=\"line\">16</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>【数据范围】</p>\n<p>对于 $30%$ 的数据，$1 \\le n \\le 8$，$1\\le m \\le 10$；<br>对于 $70%$ 的数据，$1\\le n,m \\le 10^4$；<br>对于 $100%$ 的数据，$1\\le n,m \\le 5\\times 10^5$。</p>\n<p>数据保证对于任意时刻，$a$ 的任意子区间（包括长度为 $1$ 和 $n$ 的子区间）和均在 $[-2^{31}, 2^{31})$ 范围内。</p>\n<p>样例说明：</p>\n<p> <img src=\"https://cdn.luogu.com.cn/upload/pic/2256.png\"> </p>\n<p>故输出结果14、16</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><strong>很明显，这是一道树状数组的模板题，但由于某神奇原因无法AC，故使用线段树来解。</strong></p>\n<p>AC代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LC pos * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RC pos * 2 + 1</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">5e5</span>+<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left, right, val;</span><br><span class=\"line\">&#125; tree[N * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tree[pos].left = left;</span><br><span class=\"line\">    tree[pos].right = right;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left == right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[pos].val = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(LC, left, mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(RC, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    tree[pos].val = tree[LC].val + tree[RC].val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">point_add</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> x, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left = tree[pos].left, right = tree[pos].right;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left == right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[pos].val += v;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">point_add</span>(LC, x, v);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">point_add</span>(RC, x, v);</span><br><span class=\"line\">    tree[pos].val = tree[LC].val + tree[RC].val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ask</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[pos].val;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (tree[pos].left + tree[pos].right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt;= mid)</span><br><span class=\"line\">        ans += <span class=\"built_in\">ask</span>(LC, left, right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right &gt; mid)</span><br><span class=\"line\">        ans += <span class=\"built_in\">ask</span>(RC, left, right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"built_in\">read</span>(), m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"built_in\">read</span>(), a = <span class=\"built_in\">read</span>(), b = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"built_in\">point_add</span>(<span class=\"number\">1</span>, a, b);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"built_in\">ask</span>(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/bvm7mvcf.png\" alt=\"AC\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"P3374\"><a href=\"#P3374\" class=\"headerlink\" title=\"P3374\"></a>P3374</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>如题，已知一个数列，你需要进行下面两种操作：</p>\n<ul>\n<li><p>将某一个数加上 $x$</p>\n</li>\n<li><p>求出某区间每一个数的和</p>\n</li>\n</ul>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行包含两个正整数 $n,m$，分别表示该数列数字的个数和操作的总个数。   </p>\n<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>\n<p>接下来 $m$ 行每行包含 $3$ 个整数，表示一个操作，具体如下：</p>\n<ul>\n<li><p><code>1 x k</code>  含义：将第 $x$ 个数加上 $k$</p>\n</li>\n<li><p><code>2 x y</code>  含义：输出区间 $[x,y]$ 内每个数的和</p>\n</li>\n</ul>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出包含若干行整数，即为所有操作 $2$ 的结果。</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 5</span><br><span class=\"line\">1 5 4 2 3</span><br><span class=\"line\">1 1 3</span><br><span class=\"line\">2 2 5</span><br><span class=\"line\">1 3 -1</span><br><span class=\"line\">1 4 2</span><br><span class=\"line\">2 1 4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14</span><br><span class=\"line\">16</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>【数据范围】</p>\n<p>对于 $30%$ 的数据，$1 \\le n \\le 8$，$1\\le m \\le 10$；<br>对于 $70%$ 的数据，$1\\le n,m \\le 10^4$；<br>对于 $100%$ 的数据，$1\\le n,m \\le 5\\times 10^5$。</p>\n<p>数据保证对于任意时刻，$a$ 的任意子区间（包括长度为 $1$ 和 $n$ 的子区间）和均在 $[-2^{31}, 2^{31})$ 范围内。</p>\n<p>样例说明：</p>\n<p> <img src=\"https://cdn.luogu.com.cn/upload/pic/2256.png\"> </p>\n<p>故输出结果14、16</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><strong>很明显，这是一道树状数组的模板题，但由于某神奇原因无法AC，故使用线段树来解。</strong></p>\n<p>AC代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LC pos * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RC pos * 2 + 1</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">5e5</span>+<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left, right, val;</span><br><span class=\"line\">&#125; tree[N * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tree[pos].left = left;</span><br><span class=\"line\">    tree[pos].right = right;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left == right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[pos].val = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(LC, left, mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(RC, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    tree[pos].val = tree[LC].val + tree[RC].val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">point_add</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> x, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> left = tree[pos].left, right = tree[pos].right;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left == right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[pos].val += v;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= mid)</span><br><span class=\"line\">        <span class=\"built_in\">point_add</span>(LC, x, v);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">point_add</span>(RC, x, v);</span><br><span class=\"line\">    tree[pos].val = tree[LC].val + tree[RC].val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ask</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tree[pos].val;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (tree[pos].left + tree[pos].right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt;= mid)</span><br><span class=\"line\">        ans += <span class=\"built_in\">ask</span>(LC, left, right);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right &gt; mid)</span><br><span class=\"line\">        ans += <span class=\"built_in\">ask</span>(RC, left, right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"built_in\">read</span>(), m = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"built_in\">read</span>(), a = <span class=\"built_in\">read</span>(), b = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"built_in\">point_add</span>(<span class=\"number\">1</span>, a, b);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"built_in\">ask</span>(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/bvm7mvcf.png\" alt=\"AC\"></p>\n"},{"title":"线段树区间乘法模板","date":"2023-10-03T01:48:53.000Z","abbrlink":5,"_content":"\n# 【模板】线段树 2\n\n## 题目描述\n\n如题，已知一个数列，你需要进行下面三种操作：\n\n- 将某区间每一个数乘上 $x$；\n- 将某区间每一个数加上 $x$；\n- 求出某区间每一个数的和。\n\n## 输入格式\n\n第一行包含三个整数 $n,q,m$，分别表示该数列数字的个数、操作的总个数和模数。\n\n第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。\n\n接下来 $q$ 行每行包含若干个整数，表示一个操作，具体如下：\n\n操作 $1$： 格式：`1 x y k`  含义：将区间 $[x,y]$ 内每个数乘上 $k$\n\n操作 $2$： 格式：`2 x y k`  含义：将区间 $[x,y]$ 内每个数加上 $k$\n\n操作 $3$： 格式：`3 x y`  含义：输出区间 $[x,y]$ 内每个数的和对 $m$ 取模所得的结果\n\n## 输出格式\n\n输出包含若干行整数，即为所有操作 $3$ 的结果。\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n5 5 38\n1 5 4 2 3\n2 1 4 1\n3 2 5\n1 2 4 2\n2 3 5 5\n3 1 4\n```\n\n### 样例输出 #1\n\n```\n17\n2\n```\n\n## 提示\n\n【数据范围】\n\n对于 $30\\%$ 的数据：$n \\le 8$，$q \\le 10$。  \n对于 $70\\%$ 的数据：$n \\le 10^3 $，$q \\le 10^4$。  \n对于 $100\\%$ 的数据：$1 \\le n \\le 10^5$，$1 \\le q \\le 10^5$。\n\n除样例外，$m = 571373$。\n\n（数据已经过加强 ^\\_^）\n\n样例说明：\n\n ![](https://cdn.luogu.com.cn/upload/pic/2255.png) \n\n故输出应为 $17$、$2$（$40 \\bmod 38 = 2$）。\n\n# 题解\n\n```cpp\n#include <bits/stdc++.h>\n#define L pos * 2\n#define R pos * 2 + 1\n#define int long long\nusing namespace std;\nconst int N = 1e5 + 5;\nint mod, q, n;\nstruct node {\n  int l, r, val;\n  int add, mul;\n} t[N * 4];\ninline int read() {\n  char c = getchar();\n  int x = 0, f = 1;\n  while (c < '0' || c > '9') {\n    if (c == '-') f = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = x * 10 + c - '0';\n    c = getchar();\n  }\n  return x * f;\n}\nvoid push_up(int pos) {\n  t[pos].val = (t[L].val + t[R].val) % mod;\n  return;\n}\nvoid push_down(int pos) {\n  t[L].val = (t[L].val * t[pos].mul + t[pos].add * (t[L].r - t[L].l + 1)) % mod;\n  t[R].val = (t[R].val * t[pos].mul + t[pos].add * (t[R].r - t[R].l + 1)) % mod;\n  t[L].mul = (t[L].mul * t[pos].mul) % mod;\n  t[R].mul = (t[R].mul * t[pos].mul) % mod;\n  t[L].add = (t[L].add * t[pos].mul + t[pos].add) % mod;\n  t[R].add = (t[R].add * t[pos].mul + t[pos].add) % mod;\n  t[pos].add = 0;\n  t[pos].mul = 1;\n  return;\n}\nvoid build(int pos, int l, int r) {\n  t[pos].l = l;\n  t[pos].r = r;\n  t[pos].mul = 1;\n  if (l == r) {\n    t[pos].val = read() % mod;\n    return;\n  }\n  int mid = (l + r) / 2;\n  build(L, l, mid);\n  build(R, mid + 1, r);\n  push_up(pos);\n  return;\n}\nvoid range_mul(int pos, int l, int r, int v) {\n  if (t[pos].l >= l && t[pos].r <= r) {\n    t[pos].add = (t[pos].add * v) % mod;\n    t[pos].mul = (t[pos].mul * v) % mod;\n    t[pos].val = (t[pos].val * v) % mod;\n    return;\n  }\n  push_down(pos);\n  int mid = (t[pos].l + t[pos].r) / 2;\n  if (l <= mid) range_mul(L, l, r, v);\n  if (r > mid) range_mul(R, l, r, v);\n  push_up(pos);\n  return;\n}\nvoid range_add(int pos, int l, int r, int v) {\n  if (t[pos].l >= l && t[pos].r <= r) {\n    t[pos].val = (t[pos].val + v * (t[pos].r - t[pos].l + 1)) % mod;\n    t[pos].add = (t[pos].add + v) % mod;\n    return;\n  }\n  push_down(pos);\n  int mid = (t[pos].l + t[pos].r) / 2;\n  if (l <= mid) range_add(L, l, r, v);\n  if (r > mid) range_add(R, l, r, v);\n  push_up(pos);\n  return;\n}\nint range_ask(int pos, int l, int r) {\n  if (t[pos].l >= l && t[pos].r <= r) return t[pos].val;\n  push_down(pos);\n  int mid = (t[pos].l + t[pos].r) / 2;\n  int ans = 0;\n  if (l <= mid) ans = (ans + range_ask(L, l, r)) % mod;\n  if (r > mid) ans = (ans + range_ask(R, l, r)) % mod;\n  return ans;\n}\nsigned main() {\n  n = read(), q = read(), mod = read();\n  build(1, 1, n);\n  for (int i = 1; i <= q; i++) {\n    int op = read(), a = read(), b = read();\n    if (op == 1) {\n      int v = read();\n      range_mul(1, a, b, v);\n    } else if (op == 2) {\n      int v = read();\n      range_add(1, a, b, v);\n    } else\n      printf(\"%lld\\n\", range_ask(1, a, b));\n  }\n  system(\"pause\");\n  return 0;\n}\n```\n\n","source":"_posts/线段树区间乘法模板.md","raw":"---\ntitle: 线段树区间乘法模板\ndate: 2023-10-03 09:48:53\nabbrlink: 5\ncategories: 数据结构\n---\n\n# 【模板】线段树 2\n\n## 题目描述\n\n如题，已知一个数列，你需要进行下面三种操作：\n\n- 将某区间每一个数乘上 $x$；\n- 将某区间每一个数加上 $x$；\n- 求出某区间每一个数的和。\n\n## 输入格式\n\n第一行包含三个整数 $n,q,m$，分别表示该数列数字的个数、操作的总个数和模数。\n\n第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。\n\n接下来 $q$ 行每行包含若干个整数，表示一个操作，具体如下：\n\n操作 $1$： 格式：`1 x y k`  含义：将区间 $[x,y]$ 内每个数乘上 $k$\n\n操作 $2$： 格式：`2 x y k`  含义：将区间 $[x,y]$ 内每个数加上 $k$\n\n操作 $3$： 格式：`3 x y`  含义：输出区间 $[x,y]$ 内每个数的和对 $m$ 取模所得的结果\n\n## 输出格式\n\n输出包含若干行整数，即为所有操作 $3$ 的结果。\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n5 5 38\n1 5 4 2 3\n2 1 4 1\n3 2 5\n1 2 4 2\n2 3 5 5\n3 1 4\n```\n\n### 样例输出 #1\n\n```\n17\n2\n```\n\n## 提示\n\n【数据范围】\n\n对于 $30\\%$ 的数据：$n \\le 8$，$q \\le 10$。  \n对于 $70\\%$ 的数据：$n \\le 10^3 $，$q \\le 10^4$。  \n对于 $100\\%$ 的数据：$1 \\le n \\le 10^5$，$1 \\le q \\le 10^5$。\n\n除样例外，$m = 571373$。\n\n（数据已经过加强 ^\\_^）\n\n样例说明：\n\n ![](https://cdn.luogu.com.cn/upload/pic/2255.png) \n\n故输出应为 $17$、$2$（$40 \\bmod 38 = 2$）。\n\n# 题解\n\n```cpp\n#include <bits/stdc++.h>\n#define L pos * 2\n#define R pos * 2 + 1\n#define int long long\nusing namespace std;\nconst int N = 1e5 + 5;\nint mod, q, n;\nstruct node {\n  int l, r, val;\n  int add, mul;\n} t[N * 4];\ninline int read() {\n  char c = getchar();\n  int x = 0, f = 1;\n  while (c < '0' || c > '9') {\n    if (c == '-') f = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = x * 10 + c - '0';\n    c = getchar();\n  }\n  return x * f;\n}\nvoid push_up(int pos) {\n  t[pos].val = (t[L].val + t[R].val) % mod;\n  return;\n}\nvoid push_down(int pos) {\n  t[L].val = (t[L].val * t[pos].mul + t[pos].add * (t[L].r - t[L].l + 1)) % mod;\n  t[R].val = (t[R].val * t[pos].mul + t[pos].add * (t[R].r - t[R].l + 1)) % mod;\n  t[L].mul = (t[L].mul * t[pos].mul) % mod;\n  t[R].mul = (t[R].mul * t[pos].mul) % mod;\n  t[L].add = (t[L].add * t[pos].mul + t[pos].add) % mod;\n  t[R].add = (t[R].add * t[pos].mul + t[pos].add) % mod;\n  t[pos].add = 0;\n  t[pos].mul = 1;\n  return;\n}\nvoid build(int pos, int l, int r) {\n  t[pos].l = l;\n  t[pos].r = r;\n  t[pos].mul = 1;\n  if (l == r) {\n    t[pos].val = read() % mod;\n    return;\n  }\n  int mid = (l + r) / 2;\n  build(L, l, mid);\n  build(R, mid + 1, r);\n  push_up(pos);\n  return;\n}\nvoid range_mul(int pos, int l, int r, int v) {\n  if (t[pos].l >= l && t[pos].r <= r) {\n    t[pos].add = (t[pos].add * v) % mod;\n    t[pos].mul = (t[pos].mul * v) % mod;\n    t[pos].val = (t[pos].val * v) % mod;\n    return;\n  }\n  push_down(pos);\n  int mid = (t[pos].l + t[pos].r) / 2;\n  if (l <= mid) range_mul(L, l, r, v);\n  if (r > mid) range_mul(R, l, r, v);\n  push_up(pos);\n  return;\n}\nvoid range_add(int pos, int l, int r, int v) {\n  if (t[pos].l >= l && t[pos].r <= r) {\n    t[pos].val = (t[pos].val + v * (t[pos].r - t[pos].l + 1)) % mod;\n    t[pos].add = (t[pos].add + v) % mod;\n    return;\n  }\n  push_down(pos);\n  int mid = (t[pos].l + t[pos].r) / 2;\n  if (l <= mid) range_add(L, l, r, v);\n  if (r > mid) range_add(R, l, r, v);\n  push_up(pos);\n  return;\n}\nint range_ask(int pos, int l, int r) {\n  if (t[pos].l >= l && t[pos].r <= r) return t[pos].val;\n  push_down(pos);\n  int mid = (t[pos].l + t[pos].r) / 2;\n  int ans = 0;\n  if (l <= mid) ans = (ans + range_ask(L, l, r)) % mod;\n  if (r > mid) ans = (ans + range_ask(R, l, r)) % mod;\n  return ans;\n}\nsigned main() {\n  n = read(), q = read(), mod = read();\n  build(1, 1, n);\n  for (int i = 1; i <= q; i++) {\n    int op = read(), a = read(), b = read();\n    if (op == 1) {\n      int v = read();\n      range_mul(1, a, b, v);\n    } else if (op == 2) {\n      int v = read();\n      range_add(1, a, b, v);\n    } else\n      printf(\"%lld\\n\", range_ask(1, a, b));\n  }\n  system(\"pause\");\n  return 0;\n}\n```\n\n","slug":"线段树区间乘法模板","published":1,"updated":"2023-10-04T23:57:40.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnpz203s000ahkkf7mwu4hoo","content":"<h1 id=\"【模板】线段树-2\"><a href=\"#【模板】线段树-2\" class=\"headerlink\" title=\"【模板】线段树 2\"></a>【模板】线段树 2</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>如题，已知一个数列，你需要进行下面三种操作：</p>\n<ul>\n<li>将某区间每一个数乘上 $x$；</li>\n<li>将某区间每一个数加上 $x$；</li>\n<li>求出某区间每一个数的和。</li>\n</ul>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行包含三个整数 $n,q,m$，分别表示该数列数字的个数、操作的总个数和模数。</p>\n<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>\n<p>接下来 $q$ 行每行包含若干个整数，表示一个操作，具体如下：</p>\n<p>操作 $1$： 格式：<code>1 x y k</code>  含义：将区间 $[x,y]$ 内每个数乘上 $k$</p>\n<p>操作 $2$： 格式：<code>2 x y k</code>  含义：将区间 $[x,y]$ 内每个数加上 $k$</p>\n<p>操作 $3$： 格式：<code>3 x y</code>  含义：输出区间 $[x,y]$ 内每个数的和对 $m$ 取模所得的结果</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出包含若干行整数，即为所有操作 $3$ 的结果。</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 5 38</span><br><span class=\"line\">1 5 4 2 3</span><br><span class=\"line\">2 1 4 1</span><br><span class=\"line\">3 2 5</span><br><span class=\"line\">1 2 4 2</span><br><span class=\"line\">2 3 5 5</span><br><span class=\"line\">3 1 4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>【数据范围】</p>\n<p>对于 $30%$ 的数据：$n \\le 8$，$q \\le 10$。<br>对于 $70%$ 的数据：$n \\le 10^3 $，$q \\le 10^4$。<br>对于 $100%$ 的数据：$1 \\le n \\le 10^5$，$1 \\le q \\le 10^5$。</p>\n<p>除样例外，$m &#x3D; 571373$。</p>\n<p>（数据已经过加强 ^_^）</p>\n<p>样例说明：</p>\n<p> <img src=\"https://cdn.luogu.com.cn/upload/pic/2255.png\"> </p>\n<p>故输出应为 $17$、$2$（$40 \\bmod 38 &#x3D; 2$）。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> L pos * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> R pos * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> mod, q, n;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> l, r, val;</span><br><span class=\"line\">  <span class=\"type\">int</span> add, mul;</span><br><span class=\"line\">&#125; t[N * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_up</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">  t[pos].val = (t[L].val + t[R].val) % mod;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_down</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">  t[L].val = (t[L].val * t[pos].mul + t[pos].add * (t[L].r - t[L].l + <span class=\"number\">1</span>)) % mod;</span><br><span class=\"line\">  t[R].val = (t[R].val * t[pos].mul + t[pos].add * (t[R].r - t[R].l + <span class=\"number\">1</span>)) % mod;</span><br><span class=\"line\">  t[L].mul = (t[L].mul * t[pos].mul) % mod;</span><br><span class=\"line\">  t[R].mul = (t[R].mul * t[pos].mul) % mod;</span><br><span class=\"line\">  t[L].add = (t[L].add * t[pos].mul + t[pos].add) % mod;</span><br><span class=\"line\">  t[R].add = (t[R].add * t[pos].mul + t[pos].add) % mod;</span><br><span class=\"line\">  t[pos].add = <span class=\"number\">0</span>;</span><br><span class=\"line\">  t[pos].mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  t[pos].l = l;</span><br><span class=\"line\">  t[pos].r = r;</span><br><span class=\"line\">  t[pos].mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">    t[pos].val = <span class=\"built_in\">read</span>() % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">build</span>(L, l, mid);</span><br><span class=\"line\">  <span class=\"built_in\">build</span>(R, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">  <span class=\"built_in\">push_up</span>(pos);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">range_mul</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[pos].l &gt;= l &amp;&amp; t[pos].r &lt;= r) &#123;</span><br><span class=\"line\">    t[pos].add = (t[pos].add * v) % mod;</span><br><span class=\"line\">    t[pos].mul = (t[pos].mul * v) % mod;</span><br><span class=\"line\">    t[pos].val = (t[pos].val * v) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">push_down</span>(pos);</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (t[pos].l + t[pos].r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid) <span class=\"built_in\">range_mul</span>(L, l, r, v);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &gt; mid) <span class=\"built_in\">range_mul</span>(R, l, r, v);</span><br><span class=\"line\">  <span class=\"built_in\">push_up</span>(pos);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">range_add</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[pos].l &gt;= l &amp;&amp; t[pos].r &lt;= r) &#123;</span><br><span class=\"line\">    t[pos].val = (t[pos].val + v * (t[pos].r - t[pos].l + <span class=\"number\">1</span>)) % mod;</span><br><span class=\"line\">    t[pos].add = (t[pos].add + v) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">push_down</span>(pos);</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (t[pos].l + t[pos].r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid) <span class=\"built_in\">range_add</span>(L, l, r, v);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &gt; mid) <span class=\"built_in\">range_add</span>(R, l, r, v);</span><br><span class=\"line\">  <span class=\"built_in\">push_up</span>(pos);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">range_ask</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[pos].l &gt;= l &amp;&amp; t[pos].r &lt;= r) <span class=\"keyword\">return</span> t[pos].val;</span><br><span class=\"line\">  <span class=\"built_in\">push_down</span>(pos);</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (t[pos].l + t[pos].r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid) ans = (ans + <span class=\"built_in\">range_ask</span>(L, l, r)) % mod;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &gt; mid) ans = (ans + <span class=\"built_in\">range_ask</span>(R, l, r)) % mod;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  n = <span class=\"built_in\">read</span>(), q = <span class=\"built_in\">read</span>(), mod = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> op = <span class=\"built_in\">read</span>(), a = <span class=\"built_in\">read</span>(), b = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> v = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">      <span class=\"built_in\">range_mul</span>(<span class=\"number\">1</span>, a, b, v);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> v = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">      <span class=\"built_in\">range_add</span>(<span class=\"number\">1</span>, a, b, v);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"built_in\">range_ask</span>(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【模板】线段树-2\"><a href=\"#【模板】线段树-2\" class=\"headerlink\" title=\"【模板】线段树 2\"></a>【模板】线段树 2</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>如题，已知一个数列，你需要进行下面三种操作：</p>\n<ul>\n<li>将某区间每一个数乘上 $x$；</li>\n<li>将某区间每一个数加上 $x$；</li>\n<li>求出某区间每一个数的和。</li>\n</ul>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行包含三个整数 $n,q,m$，分别表示该数列数字的个数、操作的总个数和模数。</p>\n<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>\n<p>接下来 $q$ 行每行包含若干个整数，表示一个操作，具体如下：</p>\n<p>操作 $1$： 格式：<code>1 x y k</code>  含义：将区间 $[x,y]$ 内每个数乘上 $k$</p>\n<p>操作 $2$： 格式：<code>2 x y k</code>  含义：将区间 $[x,y]$ 内每个数加上 $k$</p>\n<p>操作 $3$： 格式：<code>3 x y</code>  含义：输出区间 $[x,y]$ 内每个数的和对 $m$ 取模所得的结果</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出包含若干行整数，即为所有操作 $3$ 的结果。</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 5 38</span><br><span class=\"line\">1 5 4 2 3</span><br><span class=\"line\">2 1 4 1</span><br><span class=\"line\">3 2 5</span><br><span class=\"line\">1 2 4 2</span><br><span class=\"line\">2 3 5 5</span><br><span class=\"line\">3 1 4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>【数据范围】</p>\n<p>对于 $30%$ 的数据：$n \\le 8$，$q \\le 10$。<br>对于 $70%$ 的数据：$n \\le 10^3 $，$q \\le 10^4$。<br>对于 $100%$ 的数据：$1 \\le n \\le 10^5$，$1 \\le q \\le 10^5$。</p>\n<p>除样例外，$m &#x3D; 571373$。</p>\n<p>（数据已经过加强 ^_^）</p>\n<p>样例说明：</p>\n<p> <img src=\"https://cdn.luogu.com.cn/upload/pic/2255.png\"> </p>\n<p>故输出应为 $17$、$2$（$40 \\bmod 38 &#x3D; 2$）。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> L pos * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> R pos * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> mod, q, n;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> l, r, val;</span><br><span class=\"line\">  <span class=\"type\">int</span> add, mul;</span><br><span class=\"line\">&#125; t[N * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_up</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">  t[pos].val = (t[L].val + t[R].val) % mod;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_down</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">  t[L].val = (t[L].val * t[pos].mul + t[pos].add * (t[L].r - t[L].l + <span class=\"number\">1</span>)) % mod;</span><br><span class=\"line\">  t[R].val = (t[R].val * t[pos].mul + t[pos].add * (t[R].r - t[R].l + <span class=\"number\">1</span>)) % mod;</span><br><span class=\"line\">  t[L].mul = (t[L].mul * t[pos].mul) % mod;</span><br><span class=\"line\">  t[R].mul = (t[R].mul * t[pos].mul) % mod;</span><br><span class=\"line\">  t[L].add = (t[L].add * t[pos].mul + t[pos].add) % mod;</span><br><span class=\"line\">  t[R].add = (t[R].add * t[pos].mul + t[pos].add) % mod;</span><br><span class=\"line\">  t[pos].add = <span class=\"number\">0</span>;</span><br><span class=\"line\">  t[pos].mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  t[pos].l = l;</span><br><span class=\"line\">  t[pos].r = r;</span><br><span class=\"line\">  t[pos].mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">    t[pos].val = <span class=\"built_in\">read</span>() % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">build</span>(L, l, mid);</span><br><span class=\"line\">  <span class=\"built_in\">build</span>(R, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">  <span class=\"built_in\">push_up</span>(pos);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">range_mul</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[pos].l &gt;= l &amp;&amp; t[pos].r &lt;= r) &#123;</span><br><span class=\"line\">    t[pos].add = (t[pos].add * v) % mod;</span><br><span class=\"line\">    t[pos].mul = (t[pos].mul * v) % mod;</span><br><span class=\"line\">    t[pos].val = (t[pos].val * v) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">push_down</span>(pos);</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (t[pos].l + t[pos].r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid) <span class=\"built_in\">range_mul</span>(L, l, r, v);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &gt; mid) <span class=\"built_in\">range_mul</span>(R, l, r, v);</span><br><span class=\"line\">  <span class=\"built_in\">push_up</span>(pos);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">range_add</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r, <span class=\"type\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[pos].l &gt;= l &amp;&amp; t[pos].r &lt;= r) &#123;</span><br><span class=\"line\">    t[pos].val = (t[pos].val + v * (t[pos].r - t[pos].l + <span class=\"number\">1</span>)) % mod;</span><br><span class=\"line\">    t[pos].add = (t[pos].add + v) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">push_down</span>(pos);</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (t[pos].l + t[pos].r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid) <span class=\"built_in\">range_add</span>(L, l, r, v);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &gt; mid) <span class=\"built_in\">range_add</span>(R, l, r, v);</span><br><span class=\"line\">  <span class=\"built_in\">push_up</span>(pos);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">range_ask</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[pos].l &gt;= l &amp;&amp; t[pos].r &lt;= r) <span class=\"keyword\">return</span> t[pos].val;</span><br><span class=\"line\">  <span class=\"built_in\">push_down</span>(pos);</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (t[pos].l + t[pos].r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid) ans = (ans + <span class=\"built_in\">range_ask</span>(L, l, r)) % mod;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &gt; mid) ans = (ans + <span class=\"built_in\">range_ask</span>(R, l, r)) % mod;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  n = <span class=\"built_in\">read</span>(), q = <span class=\"built_in\">read</span>(), mod = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> op = <span class=\"built_in\">read</span>(), a = <span class=\"built_in\">read</span>(), b = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> v = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">      <span class=\"built_in\">range_mul</span>(<span class=\"number\">1</span>, a, b, v);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> v = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">      <span class=\"built_in\">range_add</span>(<span class=\"number\">1</span>, a, b, v);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"built_in\">range_ask</span>(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"博客测试页","abbrlink":1,"date":"1997-10-01T05:40:14.000Z","_content":"\n# 一级标题测试\n\n## 二级标题测试\n\n### 三级标题测试\n\n#### 四级标题测试\n\n##### 五级标题测试\n\n###### 六级标题测试\n\n> 引用测试\n>\n> 123456\n\n```cpp\n//代码块测试\n```\n\n**加粗文本**\n\n*斜体文本*\n\n<u>下划线文本</u>\n\n~~删除线文本~~\n\n<!--注释-->\n\n[超链接测试](https://paluaix.github.io)\n\n![图片测试](https://pic.imgdb.cn/item/651e7543c458853aef2dc274.jpg)\n\n","source":"_posts/博客测试页.md","raw":"---\ntitle: 博客测试页\nabbrlink: 1\ncategories: 测试\ndate: 1997-10-01 13:40:14\n---\n\n# 一级标题测试\n\n## 二级标题测试\n\n### 三级标题测试\n\n#### 四级标题测试\n\n##### 五级标题测试\n\n###### 六级标题测试\n\n> 引用测试\n>\n> 123456\n\n```cpp\n//代码块测试\n```\n\n**加粗文本**\n\n*斜体文本*\n\n<u>下划线文本</u>\n\n~~删除线文本~~\n\n<!--注释-->\n\n[超链接测试](https://paluaix.github.io)\n\n![图片测试](https://pic.imgdb.cn/item/651e7543c458853aef2dc274.jpg)\n\n","slug":"博客测试页","published":1,"updated":"2023-10-05T08:37:31.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnpz203s000bhkkf9l2uap8r","content":"<h1 id=\"一级标题测试\"><a href=\"#一级标题测试\" class=\"headerlink\" title=\"一级标题测试\"></a>一级标题测试</h1><h2 id=\"二级标题测试\"><a href=\"#二级标题测试\" class=\"headerlink\" title=\"二级标题测试\"></a>二级标题测试</h2><h3 id=\"三级标题测试\"><a href=\"#三级标题测试\" class=\"headerlink\" title=\"三级标题测试\"></a>三级标题测试</h3><h4 id=\"四级标题测试\"><a href=\"#四级标题测试\" class=\"headerlink\" title=\"四级标题测试\"></a>四级标题测试</h4><h5 id=\"五级标题测试\"><a href=\"#五级标题测试\" class=\"headerlink\" title=\"五级标题测试\"></a>五级标题测试</h5><h6 id=\"六级标题测试\"><a href=\"#六级标题测试\" class=\"headerlink\" title=\"六级标题测试\"></a>六级标题测试</h6><blockquote>\n<p>引用测试</p>\n<p>123456</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码块测试</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>加粗文本</strong></p>\n<p><em>斜体文本</em></p>\n<p><u>下划线文本</u></p>\n<p><del>删除线文本</del></p>\n<!--注释-->\n\n<p><a href=\"https://paluaix.github.io/\">超链接测试</a></p>\n<p><img src=\"https://pic.imgdb.cn/item/651e7543c458853aef2dc274.jpg\" alt=\"图片测试\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一级标题测试\"><a href=\"#一级标题测试\" class=\"headerlink\" title=\"一级标题测试\"></a>一级标题测试</h1><h2 id=\"二级标题测试\"><a href=\"#二级标题测试\" class=\"headerlink\" title=\"二级标题测试\"></a>二级标题测试</h2><h3 id=\"三级标题测试\"><a href=\"#三级标题测试\" class=\"headerlink\" title=\"三级标题测试\"></a>三级标题测试</h3><h4 id=\"四级标题测试\"><a href=\"#四级标题测试\" class=\"headerlink\" title=\"四级标题测试\"></a>四级标题测试</h4><h5 id=\"五级标题测试\"><a href=\"#五级标题测试\" class=\"headerlink\" title=\"五级标题测试\"></a>五级标题测试</h5><h6 id=\"六级标题测试\"><a href=\"#六级标题测试\" class=\"headerlink\" title=\"六级标题测试\"></a>六级标题测试</h6><blockquote>\n<p>引用测试</p>\n<p>123456</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码块测试</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>加粗文本</strong></p>\n<p><em>斜体文本</em></p>\n<p><u>下划线文本</u></p>\n<p><del>删除线文本</del></p>\n<!--注释-->\n\n<p><a href=\"https://paluaix.github.io/\">超链接测试</a></p>\n<p><img src=\"https://pic.imgdb.cn/item/651e7543c458853aef2dc274.jpg\" alt=\"图片测试\"></p>\n"},{"title":"线段树区间修改模板","date":"2023-10-02T00:31:53.000Z","abbrlink":4,"_content":"\n# 【模板】线段树\n\n## 题目描述\n\n如题，已知一个数列，你需要进行下面两种操作：\n\n1. 将某区间每一个数加上 $k$。\n2. 求出某区间每一个数的和。\n\n## 输入格式\n\n第一行包含两个整数 $n, m$，分别表示该数列数字的个数和操作的总个数。\n\n第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。\n\n接下来 $m$ 行每行包含 $3$ 或 $4$ 个整数，表示一个操作，具体如下：\n\n1. `1 x y k`：将区间 $[x, y]$ 内每个数加上 $k$。\n2. `2 x y`：输出区间 $[x, y]$ 内每个数的和。\n\n## 输出格式\n\n输出包含若干行整数，即为所有操作 2 的结果。\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n5 5\n1 5 4 2 3\n2 2 4\n1 2 3 2\n2 3 4\n1 1 5 1\n2 1 4\n```\n\n### 样例输出 #1\n\n```\n11\n8\n20\n```\n\n## 提示\n\n对于 $30\\%$ 的数据：$n \\le 8$，$m \\le 10$。  \n对于 $70\\%$ 的数据：$n \\le {10}^3$，$m \\le {10}^4$。  \n对于 $100\\%$ 的数据：$1 \\le n, m \\le {10}^5$。\n\n保证任意时刻数列中所有元素的绝对值之和 $\\le {10}^{18}$。\n\n**【样例解释】**\n\n![](https://cdn.luogu.com.cn/upload/pic/2251.png)\n\n# 题解\n\n**线段树的区间修改与查询**\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define LC pos * 2\n#define RC pos * 2 + 1\nusing namespace std;\nconst int N = 1e5 + 5;\nstruct node {\n  int left, right, val, lazy;\n} tree[N * 4];\ninline int read() {\n  char c = getchar();\n  int x = 0, f = 1;\n  while (c < '0' || c > '9') {\n    if (c == '-') f = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = x * 10 + c - '0';\n    c = getchar();\n  }\n  return x * f;\n}\nvoid push_up(int pos) { tree[pos].val = tree[LC].val + tree[RC].val; }\nvoid push_down(int pos) {\n  if (tree[pos].lazy) {\n    tree[LC].val += tree[pos].lazy * (tree[LC].right - tree[LC].left + 1);\n    tree[RC].val += tree[pos].lazy * (tree[RC].right - tree[RC].left + 1);\n    tree[LC].lazy += tree[pos].lazy;\n    tree[RC].lazy += tree[pos].lazy;\n    tree[pos].lazy = 0;\n  }\n}\nvoid build(int pos, int left, int right) {\n  tree[pos].left = left, tree[pos].right = right;\n  if (left == right) {\n    tree[pos].val = read();\n    return;\n  }\n  int mid = (left + right) / 2;\n  build(LC, left, mid);\n  build(RC, mid + 1, right);\n  push_up(pos);\n}\nvoid range_add(int pos, int left, int right, int val) {\n  if (tree[pos].left >= left && tree[pos].right <= right) {\n    tree[pos].val += val * (tree[pos].right - tree[pos].left + 1);\n    tree[pos].lazy += val;\n    return;\n  }\n  push_down(pos);\n  int mid = (tree[pos].left + tree[pos].right) / 2;\n  if (left <= mid) range_add(LC, left, right, val);\n  if (right > mid) range_add(RC, left, right, val);\n  push_up(pos);\n}\nint range_ask(int pos, int left, int right) {\n  if (tree[pos].left >= left && tree[pos].right <= right) return tree[pos].val;\n  push_down(pos);\n  int mid = (tree[pos].left + tree[pos].right) / 2;\n  int ans = 0;\n  if (left <= mid) ans += range_ask(LC, left, right);\n  if (right > mid) ans += range_ask(RC, left, right);\n  return ans;\n}\nsigned main() {\n  int n = read(), q = read();\n  build(1, 1, n);\n  for (int i = 1; i <= q; i++) {\n    char op[2];\n    scanf(\"%s\", &op);\n    if (op[0] == 'C') {\n      int a = read(), b = read(), c = read();\n      range_add(1, a, b, c);\n    } else {\n      int a = read(), b = read();\n      printf(\"%lld\\n\", range_ask(1, a, b));\n    }\n  }\n  system(\"pause\");\n  return 0;\n}\n```","source":"_posts/线段树区间修改模板.md","raw":"---\ntitle: 线段树区间修改模板\ndate: 2023-10-02 08:31:53\nabbrlink: 4\ncategories: 数据结构\n---\n\n# 【模板】线段树\n\n## 题目描述\n\n如题，已知一个数列，你需要进行下面两种操作：\n\n1. 将某区间每一个数加上 $k$。\n2. 求出某区间每一个数的和。\n\n## 输入格式\n\n第一行包含两个整数 $n, m$，分别表示该数列数字的个数和操作的总个数。\n\n第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。\n\n接下来 $m$ 行每行包含 $3$ 或 $4$ 个整数，表示一个操作，具体如下：\n\n1. `1 x y k`：将区间 $[x, y]$ 内每个数加上 $k$。\n2. `2 x y`：输出区间 $[x, y]$ 内每个数的和。\n\n## 输出格式\n\n输出包含若干行整数，即为所有操作 2 的结果。\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n5 5\n1 5 4 2 3\n2 2 4\n1 2 3 2\n2 3 4\n1 1 5 1\n2 1 4\n```\n\n### 样例输出 #1\n\n```\n11\n8\n20\n```\n\n## 提示\n\n对于 $30\\%$ 的数据：$n \\le 8$，$m \\le 10$。  \n对于 $70\\%$ 的数据：$n \\le {10}^3$，$m \\le {10}^4$。  \n对于 $100\\%$ 的数据：$1 \\le n, m \\le {10}^5$。\n\n保证任意时刻数列中所有元素的绝对值之和 $\\le {10}^{18}$。\n\n**【样例解释】**\n\n![](https://cdn.luogu.com.cn/upload/pic/2251.png)\n\n# 题解\n\n**线段树的区间修改与查询**\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define LC pos * 2\n#define RC pos * 2 + 1\nusing namespace std;\nconst int N = 1e5 + 5;\nstruct node {\n  int left, right, val, lazy;\n} tree[N * 4];\ninline int read() {\n  char c = getchar();\n  int x = 0, f = 1;\n  while (c < '0' || c > '9') {\n    if (c == '-') f = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = x * 10 + c - '0';\n    c = getchar();\n  }\n  return x * f;\n}\nvoid push_up(int pos) { tree[pos].val = tree[LC].val + tree[RC].val; }\nvoid push_down(int pos) {\n  if (tree[pos].lazy) {\n    tree[LC].val += tree[pos].lazy * (tree[LC].right - tree[LC].left + 1);\n    tree[RC].val += tree[pos].lazy * (tree[RC].right - tree[RC].left + 1);\n    tree[LC].lazy += tree[pos].lazy;\n    tree[RC].lazy += tree[pos].lazy;\n    tree[pos].lazy = 0;\n  }\n}\nvoid build(int pos, int left, int right) {\n  tree[pos].left = left, tree[pos].right = right;\n  if (left == right) {\n    tree[pos].val = read();\n    return;\n  }\n  int mid = (left + right) / 2;\n  build(LC, left, mid);\n  build(RC, mid + 1, right);\n  push_up(pos);\n}\nvoid range_add(int pos, int left, int right, int val) {\n  if (tree[pos].left >= left && tree[pos].right <= right) {\n    tree[pos].val += val * (tree[pos].right - tree[pos].left + 1);\n    tree[pos].lazy += val;\n    return;\n  }\n  push_down(pos);\n  int mid = (tree[pos].left + tree[pos].right) / 2;\n  if (left <= mid) range_add(LC, left, right, val);\n  if (right > mid) range_add(RC, left, right, val);\n  push_up(pos);\n}\nint range_ask(int pos, int left, int right) {\n  if (tree[pos].left >= left && tree[pos].right <= right) return tree[pos].val;\n  push_down(pos);\n  int mid = (tree[pos].left + tree[pos].right) / 2;\n  int ans = 0;\n  if (left <= mid) ans += range_ask(LC, left, right);\n  if (right > mid) ans += range_ask(RC, left, right);\n  return ans;\n}\nsigned main() {\n  int n = read(), q = read();\n  build(1, 1, n);\n  for (int i = 1; i <= q; i++) {\n    char op[2];\n    scanf(\"%s\", &op);\n    if (op[0] == 'C') {\n      int a = read(), b = read(), c = read();\n      range_add(1, a, b, c);\n    } else {\n      int a = read(), b = read();\n      printf(\"%lld\\n\", range_ask(1, a, b));\n    }\n  }\n  system(\"pause\");\n  return 0;\n}\n```","slug":"线段树区间修改模板","published":1,"updated":"2023-10-04T23:57:40.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnpz203t000dhkkf6mkicyes","content":"<h1 id=\"【模板】线段树\"><a href=\"#【模板】线段树\" class=\"headerlink\" title=\"【模板】线段树\"></a>【模板】线段树</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>如题，已知一个数列，你需要进行下面两种操作：</p>\n<ol>\n<li>将某区间每一个数加上 $k$。</li>\n<li>求出某区间每一个数的和。</li>\n</ol>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行包含两个整数 $n, m$，分别表示该数列数字的个数和操作的总个数。</p>\n<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>\n<p>接下来 $m$ 行每行包含 $3$ 或 $4$ 个整数，表示一个操作，具体如下：</p>\n<ol>\n<li><code>1 x y k</code>：将区间 $[x, y]$ 内每个数加上 $k$。</li>\n<li><code>2 x y</code>：输出区间 $[x, y]$ 内每个数的和。</li>\n</ol>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出包含若干行整数，即为所有操作 2 的结果。</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 5</span><br><span class=\"line\">1 5 4 2 3</span><br><span class=\"line\">2 2 4</span><br><span class=\"line\">1 2 3 2</span><br><span class=\"line\">2 3 4</span><br><span class=\"line\">1 1 5 1</span><br><span class=\"line\">2 1 4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11</span><br><span class=\"line\">8</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>对于 $30%$ 的数据：$n \\le 8$，$m \\le 10$。<br>对于 $70%$ 的数据：$n \\le {10}^3$，$m \\le {10}^4$。<br>对于 $100%$ 的数据：$1 \\le n, m \\le {10}^5$。</p>\n<p>保证任意时刻数列中所有元素的绝对值之和 $\\le {10}^{18}$。</p>\n<p><strong>【样例解释】</strong></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/pic/2251.png\"></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><strong>线段树的区间修改与查询</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LC pos * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RC pos * 2 + 1</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> left, right, val, lazy;</span><br><span class=\"line\">&#125; tree[N * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_up</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123; tree[pos].val = tree[LC].val + tree[RC].val; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_down</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tree[pos].lazy) &#123;</span><br><span class=\"line\">    tree[LC].val += tree[pos].lazy * (tree[LC].right - tree[LC].left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[RC].val += tree[pos].lazy * (tree[RC].right - tree[RC].left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[LC].lazy += tree[pos].lazy;</span><br><span class=\"line\">    tree[RC].lazy += tree[pos].lazy;</span><br><span class=\"line\">    tree[pos].lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">  tree[pos].left = left, tree[pos].right = right;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left == right) &#123;</span><br><span class=\"line\">    tree[pos].val = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">build</span>(LC, left, mid);</span><br><span class=\"line\">  <span class=\"built_in\">build</span>(RC, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">  <span class=\"built_in\">push_up</span>(pos);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">range_add</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right) &#123;</span><br><span class=\"line\">    tree[pos].val += val * (tree[pos].right - tree[pos].left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[pos].lazy += val;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">push_down</span>(pos);</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (tree[pos].left + tree[pos].right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &lt;= mid) <span class=\"built_in\">range_add</span>(LC, left, right, val);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (right &gt; mid) <span class=\"built_in\">range_add</span>(RC, left, right, val);</span><br><span class=\"line\">  <span class=\"built_in\">push_up</span>(pos);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">range_ask</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right) <span class=\"keyword\">return</span> tree[pos].val;</span><br><span class=\"line\">  <span class=\"built_in\">push_down</span>(pos);</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (tree[pos].left + tree[pos].right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &lt;= mid) ans += <span class=\"built_in\">range_ask</span>(LC, left, right);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (right &gt; mid) ans += <span class=\"built_in\">range_ask</span>(RC, left, right);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> n = <span class=\"built_in\">read</span>(), q = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, &amp;op);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (op[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;C&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> a = <span class=\"built_in\">read</span>(), b = <span class=\"built_in\">read</span>(), c = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">      <span class=\"built_in\">range_add</span>(<span class=\"number\">1</span>, a, b, c);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> a = <span class=\"built_in\">read</span>(), b = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"built_in\">range_ask</span>(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【模板】线段树\"><a href=\"#【模板】线段树\" class=\"headerlink\" title=\"【模板】线段树\"></a>【模板】线段树</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>如题，已知一个数列，你需要进行下面两种操作：</p>\n<ol>\n<li>将某区间每一个数加上 $k$。</li>\n<li>求出某区间每一个数的和。</li>\n</ol>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行包含两个整数 $n, m$，分别表示该数列数字的个数和操作的总个数。</p>\n<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>\n<p>接下来 $m$ 行每行包含 $3$ 或 $4$ 个整数，表示一个操作，具体如下：</p>\n<ol>\n<li><code>1 x y k</code>：将区间 $[x, y]$ 内每个数加上 $k$。</li>\n<li><code>2 x y</code>：输出区间 $[x, y]$ 内每个数的和。</li>\n</ol>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出包含若干行整数，即为所有操作 2 的结果。</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 5</span><br><span class=\"line\">1 5 4 2 3</span><br><span class=\"line\">2 2 4</span><br><span class=\"line\">1 2 3 2</span><br><span class=\"line\">2 3 4</span><br><span class=\"line\">1 1 5 1</span><br><span class=\"line\">2 1 4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11</span><br><span class=\"line\">8</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h2><p>对于 $30%$ 的数据：$n \\le 8$，$m \\le 10$。<br>对于 $70%$ 的数据：$n \\le {10}^3$，$m \\le {10}^4$。<br>对于 $100%$ 的数据：$1 \\le n, m \\le {10}^5$。</p>\n<p>保证任意时刻数列中所有元素的绝对值之和 $\\le {10}^{18}$。</p>\n<p><strong>【样例解释】</strong></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/pic/2251.png\"></p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><strong>线段树的区间修改与查询</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LC pos * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RC pos * 2 + 1</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> left, right, val, lazy;</span><br><span class=\"line\">&#125; tree[N * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_up</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123; tree[pos].val = tree[LC].val + tree[RC].val; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push_down</span><span class=\"params\">(<span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tree[pos].lazy) &#123;</span><br><span class=\"line\">    tree[LC].val += tree[pos].lazy * (tree[LC].right - tree[LC].left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[RC].val += tree[pos].lazy * (tree[RC].right - tree[RC].left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[LC].lazy += tree[pos].lazy;</span><br><span class=\"line\">    tree[RC].lazy += tree[pos].lazy;</span><br><span class=\"line\">    tree[pos].lazy = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">  tree[pos].left = left, tree[pos].right = right;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left == right) &#123;</span><br><span class=\"line\">    tree[pos].val = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">build</span>(LC, left, mid);</span><br><span class=\"line\">  <span class=\"built_in\">build</span>(RC, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">  <span class=\"built_in\">push_up</span>(pos);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">range_add</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right) &#123;</span><br><span class=\"line\">    tree[pos].val += val * (tree[pos].right - tree[pos].left + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tree[pos].lazy += val;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">push_down</span>(pos);</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (tree[pos].left + tree[pos].right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &lt;= mid) <span class=\"built_in\">range_add</span>(LC, left, right, val);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (right &gt; mid) <span class=\"built_in\">range_add</span>(RC, left, right, val);</span><br><span class=\"line\">  <span class=\"built_in\">push_up</span>(pos);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">range_ask</span><span class=\"params\">(<span class=\"type\">int</span> pos, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right) <span class=\"keyword\">return</span> tree[pos].val;</span><br><span class=\"line\">  <span class=\"built_in\">push_down</span>(pos);</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (tree[pos].left + tree[pos].right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &lt;= mid) ans += <span class=\"built_in\">range_ask</span>(LC, left, right);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (right &gt; mid) ans += <span class=\"built_in\">range_ask</span>(RC, left, right);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> n = <span class=\"built_in\">read</span>(), q = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">  <span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> op[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, &amp;op);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (op[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;C&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> a = <span class=\"built_in\">read</span>(), b = <span class=\"built_in\">read</span>(), c = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">      <span class=\"built_in\">range_add</span>(<span class=\"number\">1</span>, a, b, c);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> a = <span class=\"built_in\">read</span>(), b = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"built_in\">range_ask</span>(<span class=\"number\">1</span>, a, b));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"线段树解决A+B问题","date":"2023-10-03T07:10:58.000Z","abbrlink":6,"_content":"\n> 无意在洛谷上看见了自己A的第一道题A+B Problem，十分感慨。但可惜时间太过长久忘记了此题正确的解法，只好使出下策：线段树！\n\n# A+B Problem\n\n## 题目描述\n\n输入两个整数 $a, b$，输出它们的和（$|a|,|b| \\le {10}^9$）。\n\n注意\n\n1. Pascal 使用 `integer` 会爆掉哦！\n2. 有负数哦！\n3. C/C++ 的 main 函数必须是 `int` 类型，而且 C 最后要 `return 0`。这不仅对洛谷其他题目有效，而且也是 NOIP/CSP/NOI 比赛的要求！\n\n好吧，同志们，我们就从这一题开始，向着大牛的路进发。\n\n> 任何一个伟大的思想，都有一个微不足道的开始。\n\n## 输入格式\n\n两个以空格分开的整数。\n\n## 输出格式\n\n一个整数。\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n20 30\n```\n\n### 样例输出 #1\n\n```\n50\n```\n\n\n\n# 题解\n\n```cpp\n#include <bits/stdc++.h>\n#define LC p << 1\n#define RC p << 1 | 1\n#define int long long\nusing namespace std;\nconst int N = 1e5;\ninline int IN() {\n  char c = getchar();\n  int x = 0, f = 1;\n  while (c < '0' || c > '9') {\n    if (c == '-') f = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = x * 10 + c - '0';\n    c = getchar();\n  }\n  return x * f;\n}\nstruct AplusB {\n  int l, r, val;\n} t[N * 4];\nvoid PushUp(int p) {\n  t[p].val = t[LC].val + t[RC].val;\n  return;\n}\nvoid Build(int p, int l, int r) {\n  t[p].l = l, t[p].r = r;\n  if (l == r) {\n    t[p].val = 0;\n    return;\n  }\n  int mid = (t[p].l + t[p].r) >> 1;\n  Build(LC, l, mid);\n  Build(RC, mid + 1, r);\n  PushUp(p);\n}\nvoid add(int p, int x, int v) {\n  if (t[p].l == t[p].r) {\n    t[p].val += v;\n    return;\n  }\n  int mid = (t[p].l + t[p].r) >> 1;\n  if (x <= mid)\n    add(LC, x, v);\n  else\n    add(RC, x, v);\n  PushUp(p);\n  return;\n}\nint Ask(int p, int l, int r) {\n  if (t[p].l >= l && t[p].r <= r) return t[p].val;\n  int ans = 0;\n  int mid = (t[p].l + t[p].r) >> 1;\n  if (l <= mid) ans += Ask(LC, l, r);\n  if (r > mid) ans += Ask(RC, l, r);\n  return ans;\n}\nsigned main() {\n  int a = IN(), b = IN();\n  Build(1, 1, 1);\n  add(1, 1, a), add(1, 1, b);\n  printf(\"%lld\", Ask(1, 1, 1));\n  system(\"pause\");\n  return 0;\n}\n\n```\n\n","source":"_posts/线段树解决A-B问题.md","raw":"---\ntitle: 线段树解决A+B问题\ndate: 2023-10-03 15:10:58\nabbrlink: 6\ncategories: 数据结构\n---\n\n> 无意在洛谷上看见了自己A的第一道题A+B Problem，十分感慨。但可惜时间太过长久忘记了此题正确的解法，只好使出下策：线段树！\n\n# A+B Problem\n\n## 题目描述\n\n输入两个整数 $a, b$，输出它们的和（$|a|,|b| \\le {10}^9$）。\n\n注意\n\n1. Pascal 使用 `integer` 会爆掉哦！\n2. 有负数哦！\n3. C/C++ 的 main 函数必须是 `int` 类型，而且 C 最后要 `return 0`。这不仅对洛谷其他题目有效，而且也是 NOIP/CSP/NOI 比赛的要求！\n\n好吧，同志们，我们就从这一题开始，向着大牛的路进发。\n\n> 任何一个伟大的思想，都有一个微不足道的开始。\n\n## 输入格式\n\n两个以空格分开的整数。\n\n## 输出格式\n\n一个整数。\n\n## 样例 #1\n\n### 样例输入 #1\n\n```\n20 30\n```\n\n### 样例输出 #1\n\n```\n50\n```\n\n\n\n# 题解\n\n```cpp\n#include <bits/stdc++.h>\n#define LC p << 1\n#define RC p << 1 | 1\n#define int long long\nusing namespace std;\nconst int N = 1e5;\ninline int IN() {\n  char c = getchar();\n  int x = 0, f = 1;\n  while (c < '0' || c > '9') {\n    if (c == '-') f = -1;\n    c = getchar();\n  }\n  while (c >= '0' && c <= '9') {\n    x = x * 10 + c - '0';\n    c = getchar();\n  }\n  return x * f;\n}\nstruct AplusB {\n  int l, r, val;\n} t[N * 4];\nvoid PushUp(int p) {\n  t[p].val = t[LC].val + t[RC].val;\n  return;\n}\nvoid Build(int p, int l, int r) {\n  t[p].l = l, t[p].r = r;\n  if (l == r) {\n    t[p].val = 0;\n    return;\n  }\n  int mid = (t[p].l + t[p].r) >> 1;\n  Build(LC, l, mid);\n  Build(RC, mid + 1, r);\n  PushUp(p);\n}\nvoid add(int p, int x, int v) {\n  if (t[p].l == t[p].r) {\n    t[p].val += v;\n    return;\n  }\n  int mid = (t[p].l + t[p].r) >> 1;\n  if (x <= mid)\n    add(LC, x, v);\n  else\n    add(RC, x, v);\n  PushUp(p);\n  return;\n}\nint Ask(int p, int l, int r) {\n  if (t[p].l >= l && t[p].r <= r) return t[p].val;\n  int ans = 0;\n  int mid = (t[p].l + t[p].r) >> 1;\n  if (l <= mid) ans += Ask(LC, l, r);\n  if (r > mid) ans += Ask(RC, l, r);\n  return ans;\n}\nsigned main() {\n  int a = IN(), b = IN();\n  Build(1, 1, 1);\n  add(1, 1, a), add(1, 1, b);\n  printf(\"%lld\", Ask(1, 1, 1));\n  system(\"pause\");\n  return 0;\n}\n\n```\n\n","slug":"线段树解决A-B问题","published":1,"updated":"2023-10-04T23:57:40.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnpz203u000ehkkf6y89dgic","content":"<blockquote>\n<p>无意在洛谷上看见了自己A的第一道题A+B Problem，十分感慨。但可惜时间太过长久忘记了此题正确的解法，只好使出下策：线段树！</p>\n</blockquote>\n<h1 id=\"A-B-Problem\"><a href=\"#A-B-Problem\" class=\"headerlink\" title=\"A+B Problem\"></a>A+B Problem</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入两个整数 $a, b$，输出它们的和（$|a|,|b| \\le {10}^9$）。</p>\n<p>注意</p>\n<ol>\n<li>Pascal 使用 <code>integer</code> 会爆掉哦！</li>\n<li>有负数哦！</li>\n<li>C&#x2F;C++ 的 main 函数必须是 <code>int</code> 类型，而且 C 最后要 <code>return 0</code>。这不仅对洛谷其他题目有效，而且也是 NOIP&#x2F;CSP&#x2F;NOI 比赛的要求！</li>\n</ol>\n<p>好吧，同志们，我们就从这一题开始，向着大牛的路进发。</p>\n<blockquote>\n<p>任何一个伟大的思想，都有一个微不足道的开始。</p>\n</blockquote>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>两个以空格分开的整数。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>一个整数。</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20 30</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">50</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LC p &lt;&lt; 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RC p &lt;&lt; 1 | 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">IN</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AplusB</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> l, r, val;</span><br><span class=\"line\">&#125; t[N * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PushUp</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">  t[p].val = t[LC].val + t[RC].val;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Build</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  t[p].l = l, t[p].r = r;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">    t[p].val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">Build</span>(LC, l, mid);</span><br><span class=\"line\">  <span class=\"built_in\">Build</span>(RC, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">  <span class=\"built_in\">PushUp</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> x, <span class=\"type\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[p].l == t[p].r) &#123;</span><br><span class=\"line\">    t[p].val += v;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt;= mid)</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(LC, x, v);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">add</span>(RC, x, v);</span><br><span class=\"line\">  <span class=\"built_in\">PushUp</span>(p);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Ask</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) <span class=\"keyword\">return</span> t[p].val;</span><br><span class=\"line\">  <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid) ans += <span class=\"built_in\">Ask</span>(LC, l, r);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &gt; mid) ans += <span class=\"built_in\">Ask</span>(RC, l, r);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> a = <span class=\"built_in\">IN</span>(), b = <span class=\"built_in\">IN</span>();</span><br><span class=\"line\">  <span class=\"built_in\">Build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, a), <span class=\"built_in\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, b);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>, <span class=\"built_in\">Ask</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>无意在洛谷上看见了自己A的第一道题A+B Problem，十分感慨。但可惜时间太过长久忘记了此题正确的解法，只好使出下策：线段树！</p>\n</blockquote>\n<h1 id=\"A-B-Problem\"><a href=\"#A-B-Problem\" class=\"headerlink\" title=\"A+B Problem\"></a>A+B Problem</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>输入两个整数 $a, b$，输出它们的和（$|a|,|b| \\le {10}^9$）。</p>\n<p>注意</p>\n<ol>\n<li>Pascal 使用 <code>integer</code> 会爆掉哦！</li>\n<li>有负数哦！</li>\n<li>C&#x2F;C++ 的 main 函数必须是 <code>int</code> 类型，而且 C 最后要 <code>return 0</code>。这不仅对洛谷其他题目有效，而且也是 NOIP&#x2F;CSP&#x2F;NOI 比赛的要求！</li>\n</ol>\n<p>好吧，同志们，我们就从这一题开始，向着大牛的路进发。</p>\n<blockquote>\n<p>任何一个伟大的思想，都有一个微不足道的开始。</p>\n</blockquote>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>两个以空格分开的整数。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>一个整数。</p>\n<h2 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h2><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20 30</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">50</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LC p &lt;&lt; 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RC p &lt;&lt; 1 | 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">IN</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"type\">int</span> x = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>) f = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    x = x * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AplusB</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> l, r, val;</span><br><span class=\"line\">&#125; t[N * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PushUp</span><span class=\"params\">(<span class=\"type\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">  t[p].val = t[LC].val + t[RC].val;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Build</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  t[p].l = l, t[p].r = r;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">    t[p].val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">Build</span>(LC, l, mid);</span><br><span class=\"line\">  <span class=\"built_in\">Build</span>(RC, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">  <span class=\"built_in\">PushUp</span>(p);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> x, <span class=\"type\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[p].l == t[p].r) &#123;</span><br><span class=\"line\">    t[p].val += v;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt;= mid)</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(LC, x, v);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">add</span>(RC, x, v);</span><br><span class=\"line\">  <span class=\"built_in\">PushUp</span>(p);</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Ask</span><span class=\"params\">(<span class=\"type\">int</span> p, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) <span class=\"keyword\">return</span> t[p].val;</span><br><span class=\"line\">  <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (l &lt;= mid) ans += <span class=\"built_in\">Ask</span>(LC, l, r);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &gt; mid) ans += <span class=\"built_in\">Ask</span>(RC, l, r);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> a = <span class=\"built_in\">IN</span>(), b = <span class=\"built_in\">IN</span>();</span><br><span class=\"line\">  <span class=\"built_in\">Build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, a), <span class=\"built_in\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, b);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>, <span class=\"built_in\">Ask</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">  <span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clnpz203h0001hkkf332c4jk5","category_id":"clnpz203k0003hkkf5l87dcel","_id":"clnpz203l0005hkkfcytp8opl"},{"post_id":"clnpz203s000ahkkf7mwu4hoo","category_id":"clnpz203r0008hkkfhkvqd9yh","_id":"clnpz203u000fhkkfdor09rcf"},{"post_id":"clnpz203q0006hkkf88kra979","category_id":"clnpz203r0008hkkfhkvqd9yh","_id":"clnpz203u000hhkkf0t6pfu17"},{"post_id":"clnpz203t000dhkkf6mkicyes","category_id":"clnpz203r0008hkkfhkvqd9yh","_id":"clnpz203u000ihkkfbljuders"},{"post_id":"clnpz203q0007hkkfgjldgyor","category_id":"clnpz203r0008hkkfhkvqd9yh","_id":"clnpz203v000khkkf6wyp9oqn"},{"post_id":"clnpz203u000ehkkf6y89dgic","category_id":"clnpz203r0008hkkfhkvqd9yh","_id":"clnpz203v000lhkkf49ingppv"},{"post_id":"clnpz203r0009hkkf6dheg2q8","category_id":"clnpz203r0008hkkfhkvqd9yh","_id":"clnpz203v000mhkkffncx2p2b"},{"post_id":"clnpz203s000bhkkf9l2uap8r","category_id":"clnpz203u000jhkkfd937a7te","_id":"clnpz203v000nhkkf403ecx6j"}],"PostTag":[],"Tag":[]}}