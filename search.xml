<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客测试页</title>
    <url>/posts/50683.html</url>
    <content><![CDATA[<h1 id="一级标题测试"><a href="#一级标题测试" class="headerlink" title="一级标题测试"></a>一级标题测试</h1><h2 id="二级标题测试"><a href="#二级标题测试" class="headerlink" title="二级标题测试"></a>二级标题测试</h2><h3 id="三级标题测试"><a href="#三级标题测试" class="headerlink" title="三级标题测试"></a>三级标题测试</h3><h4 id="四级标题测试"><a href="#四级标题测试" class="headerlink" title="四级标题测试"></a>四级标题测试</h4><h5 id="五级标题测试"><a href="#五级标题测试" class="headerlink" title="五级标题测试"></a>五级标题测试</h5><h6 id="六级标题测试"><a href="#六级标题测试" class="headerlink" title="六级标题测试"></a>六级标题测试</h6><blockquote>
<p>引用测试</p>
<p>123456</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码块测试</span></span><br></pre></td></tr></table></figure>

<p><strong>加粗文本</strong></p>
<p><em>斜体文本</em></p>
<p><u>下划线文本</u></p>
<p><del>删除线文本</del></p>
<!--注释-->

<p><a href="https://paluaix.github.io/">超链接测试</a></p>
<p>分割线测试</p>
<hr>
<img src="https://img.alicdn.com/imgextra/i4/2877272061/TB2ixQXhcPRfKJjSZFOXXbKEVXa_!!2877272061.jpg" alt="图片测试" style="zoom:33%;" />
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>洛谷P3374的线段树解法</title>
    <url>/posts/1.html</url>
    <content><![CDATA[<h1 id="题干"><a href="#题干" class="headerlink" title="题干"></a>题干</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ul>
<li><p>将某一个数加上 $x$</p>
</li>
<li><p>求出某区间每一个数的和</p>
</li>
</ul>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含两个正整数 $n,m$，分别表示该数列数字的个数和操作的总个数。   </p>
<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>
<p>接下来 $m$ 行每行包含 $3$ 个整数，表示一个操作，具体如下：</p>
<ul>
<li><p><code>1 x k</code>  含义：将第 $x$ 个数加上 $k$</p>
</li>
<li><p><code>2 x y</code>  含义：输出区间 $[x,y]$ 内每个数的和</p>
</li>
</ul>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包含若干行整数，即为所有操作 $2$ 的结果。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 5 4 2 3</span><br><span class="line">1 1 3</span><br><span class="line">2 2 5</span><br><span class="line">1 3 -1</span><br><span class="line">1 4 2</span><br><span class="line">2 1 4</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">14</span><br><span class="line">16</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【数据范围】</p>
<p>对于 $30%$ 的数据，$1 \le n \le 8$，$1\le m \le 10$；<br>对于 $70%$ 的数据，$1\le n,m \le 10^4$；<br>对于 $100%$ 的数据，$1\le n,m \le 5\times 10^5$。</p>
<p>数据保证对于任意时刻，$a$ 的任意子区间（包括长度为 $1$ 和 $n$ 的子区间）和均在 $[-2^{31}, 2^{31})$ 范围内。</p>
<p>样例说明：</p>
<p> <img src="https://cdn.luogu.com.cn/upload/pic/2256.png"> </p>
<p>故输出结果14、16</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p><strong>很明显，这是一道树状数组的模板题，但由于某神奇原因无法AC，故使用线段树来解。</strong></p>
<p>AC代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LC pos * 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC pos * 2 + 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> left, right, val;</span><br><span class="line">&#125; tree[N * <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[pos].left = left;</span><br><span class="line">    tree[pos].right = right;</span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].val = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(LC, left, mid);</span><br><span class="line">    <span class="built_in">build</span>(RC, mid + <span class="number">1</span>, right);</span><br><span class="line">    tree[pos].val = tree[LC].val + tree[RC].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">point_add</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> x, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = tree[pos].left, right = tree[pos].right;</span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].val += v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        <span class="built_in">point_add</span>(LC, x, v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">point_add</span>(RC, x, v);</span><br><span class="line">    tree[pos].val = tree[LC].val + tree[RC].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right)</span><br><span class="line">        <span class="keyword">return</span> tree[pos].val;</span><br><span class="line">    <span class="type">int</span> mid = (tree[pos].left + tree[pos].right) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &lt;= mid)</span><br><span class="line">        ans += <span class="built_in">ask</span>(LC, left, right);</span><br><span class="line">    <span class="keyword">if</span> (right &gt; mid)</span><br><span class="line">        ans += <span class="built_in">ask</span>(RC, left, right);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">read</span>(), a = <span class="built_in">read</span>(), b = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">point_add</span>(<span class="number">1</span>, a, b);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">ask</span>(<span class="number">1</span>, a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/bvm7mvcf.png" alt="AC"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
</search>
