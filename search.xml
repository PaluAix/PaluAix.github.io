<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客测试页</title>
    <url>/posts/1.html</url>
    <content><![CDATA[<h1 id="一级标题测试"><a href="#一级标题测试" class="headerlink" title="一级标题测试"></a>一级标题测试</h1><h2 id="二级标题测试"><a href="#二级标题测试" class="headerlink" title="二级标题测试"></a>二级标题测试</h2><h3 id="三级标题测试"><a href="#三级标题测试" class="headerlink" title="三级标题测试"></a>三级标题测试</h3><h4 id="四级标题测试"><a href="#四级标题测试" class="headerlink" title="四级标题测试"></a>四级标题测试</h4><h5 id="五级标题测试"><a href="#五级标题测试" class="headerlink" title="五级标题测试"></a>五级标题测试</h5><h6 id="六级标题测试"><a href="#六级标题测试" class="headerlink" title="六级标题测试"></a>六级标题测试</h6><blockquote>
<p>引用测试</p>
<p>123456</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码块测试</span></span><br></pre></td></tr></table></figure>

<p><strong>加粗文本</strong></p>
<p><em>斜体文本</em></p>
<p><u>下划线文本</u></p>
<p><del>删除线文本</del></p>
<!--注释-->

<p><a href="https://paluaix.github.io/">超链接测试</a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>洛谷P3374的线段树解法</title>
    <url>/posts/2.html</url>
    <content><![CDATA[<h1 id="题干"><a href="#题干" class="headerlink" title="题干"></a>题干</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ul>
<li><p>将某一个数加上 $x$</p>
</li>
<li><p>求出某区间每一个数的和</p>
</li>
</ul>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含两个正整数 $n,m$，分别表示该数列数字的个数和操作的总个数。   </p>
<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>
<p>接下来 $m$ 行每行包含 $3$ 个整数，表示一个操作，具体如下：</p>
<ul>
<li><p><code>1 x k</code>  含义：将第 $x$ 个数加上 $k$</p>
</li>
<li><p><code>2 x y</code>  含义：输出区间 $[x,y]$ 内每个数的和</p>
</li>
</ul>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包含若干行整数，即为所有操作 $2$ 的结果。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 5 4 2 3</span><br><span class="line">1 1 3</span><br><span class="line">2 2 5</span><br><span class="line">1 3 -1</span><br><span class="line">1 4 2</span><br><span class="line">2 1 4</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">14</span><br><span class="line">16</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【数据范围】</p>
<p>对于 $30%$ 的数据，$1 \le n \le 8$，$1\le m \le 10$；<br>对于 $70%$ 的数据，$1\le n,m \le 10^4$；<br>对于 $100%$ 的数据，$1\le n,m \le 5\times 10^5$。</p>
<p>数据保证对于任意时刻，$a$ 的任意子区间（包括长度为 $1$ 和 $n$ 的子区间）和均在 $[-2^{31}, 2^{31})$ 范围内。</p>
<p>样例说明：</p>
<p> <img src="https://cdn.luogu.com.cn/upload/pic/2256.png"> </p>
<p>故输出结果14、16</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p><strong>很明显，这是一道树状数组的模板题，但由于某神奇原因无法AC，故使用线段树来解。</strong></p>
<p>AC代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LC pos * 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC pos * 2 + 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> left, right, val;</span><br><span class="line">&#125; tree[N * <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[pos].left = left;</span><br><span class="line">    tree[pos].right = right;</span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].val = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(LC, left, mid);</span><br><span class="line">    <span class="built_in">build</span>(RC, mid + <span class="number">1</span>, right);</span><br><span class="line">    tree[pos].val = tree[LC].val + tree[RC].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">point_add</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> x, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = tree[pos].left, right = tree[pos].right;</span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].val += v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        <span class="built_in">point_add</span>(LC, x, v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">point_add</span>(RC, x, v);</span><br><span class="line">    tree[pos].val = tree[LC].val + tree[RC].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right)</span><br><span class="line">        <span class="keyword">return</span> tree[pos].val;</span><br><span class="line">    <span class="type">int</span> mid = (tree[pos].left + tree[pos].right) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &lt;= mid)</span><br><span class="line">        ans += <span class="built_in">ask</span>(LC, left, right);</span><br><span class="line">    <span class="keyword">if</span> (right &gt; mid)</span><br><span class="line">        ans += <span class="built_in">ask</span>(RC, left, right);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">read</span>(), a = <span class="built_in">read</span>(), b = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">point_add</span>(<span class="number">1</span>, a, b);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">ask</span>(<span class="number">1</span>, a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/bvm7mvcf.png" alt="AC"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>10.02T1物理题</title>
    <url>/posts/3.html</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>物理课上，Enos正在做电学实验。Enos有一排灯座，总共可以接M个小灯泡。他还有N种小灯泡，每种小灯泡标有额定功率Pi，不同的小灯泡额定功率不同。为了使接通电源后灯座上的灯泡由暗到亮变化，要求小灯泡要按额定功率从小到大接。为避免接通电源后发光序列过于单调，规定不能有超过ai只连续的第i种小灯泡。不过Enos发现，在灯座上已经固定了一些小灯泡，它们无法被取下来。现在 Enos想知道，在电源接通下一共能有多少种不同的发光序列?可以不用某种小灯泡，但总共接入的小灯泡数必须恰为M。</p>
<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行两个正整数N,M，分别表示小灯泡的个数和灯座上的接口数。接下来N行，每行两个正整数Pi,ai，含义如上描述。 接下来一行个M整数bi，如果bi为0表示第i个接口没有小灯泡，否则表示第i个接口已经固定有一只第bi种的小灯泡。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>一行一个整数表示不同的发光序列数。由于答案可能很大，你只需要输出答案除以1 000 000 007的余数即可。如果没有一种可行的方案，输出一行-1。</p>
<h1 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h1><h2 id="输入数据-1"><a href="#输入数据-1" class="headerlink" title="输入数据 1"></a>输入数据 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 4</span><br><span class="line">40 3</span><br><span class="line">60 2</span><br><span class="line">0 0 1 0</span><br></pre></td></tr></table></figure>

<h2 id="输出数据-1"><a href="#输出数据-1" class="headerlink" title="输出数据 1"></a>输出数据 1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<h1 id="数据范围与约定"><a href="#数据范围与约定" class="headerlink" title="数据范围与约定"></a>数据范围与约定</h1><p>对于 20% 的数据，N,M,ai≤ 10;</p>
<p>对于 50% 的数据，N，M,ai ≤ 20;</p>
<p>对于 100% 的数据，0&lt;N,M,ai&lt;100 ,0&lt;Pi&lt;&#x3D;10 000 , 0&lt;&#x3D;bi&lt;&#x3D;N;</p>
<p>均匀分布着 20% 的数据，bi&#x3D; 0。</p>
<h1 id="代码及注释"><a href="#代码及注释" class="headerlink" title="代码及注释"></a>代码及注释</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, b[<span class="number">105</span>], vis[<span class="number">105</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> power, max, flag;</span><br><span class="line">&#125; light[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.power &lt; b.power;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;physics.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;physics.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        light[i].power = <span class="built_in">read</span>(), light[i].max = <span class="built_in">read</span>();</span><br><span class="line">        light[i].flag = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        b[i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">sort</span>(light + <span class="number">1</span>, light + n + <span class="number">1</span>, cmp);</span><br><span class="line">    vis[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            <span class="keyword">if</span> (vis[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= light[i].max; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j + k &gt; m)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (b[j + k] &amp;&amp; b[j + k] != light[i].flag)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    vis[j + k] += vis[j];</span><br><span class="line">                    vis[j + k] = vis[j + k] % mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vis[m] == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, vis[m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>动态规划</category>
      </categories>
  </entry>
  <entry>
    <title>线段树单点与区间修改查询模板</title>
    <url>/posts/4.html</url>
    <content><![CDATA[<h1 id="【模板】线段树"><a href="#【模板】线段树" class="headerlink" title="【模板】线段树"></a>【模板】线段树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ol>
<li>将某区间每一个数加上 $k$。</li>
<li>求出某区间每一个数的和。</li>
</ol>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含两个整数 $n, m$，分别表示该数列数字的个数和操作的总个数。</p>
<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>
<p>接下来 $m$ 行每行包含 $3$ 或 $4$ 个整数，表示一个操作，具体如下：</p>
<ol>
<li><code>1 x y k</code>：将区间 $[x, y]$ 内每个数加上 $k$。</li>
<li><code>2 x y</code>：输出区间 $[x, y]$ 内每个数的和。</li>
</ol>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包含若干行整数，即为所有操作 2 的结果。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 5 4 2 3</span><br><span class="line">2 2 4</span><br><span class="line">1 2 3 2</span><br><span class="line">2 3 4</span><br><span class="line">1 1 5 1</span><br><span class="line">2 1 4</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11</span><br><span class="line">8</span><br><span class="line">20</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $30%$ 的数据：$n \le 8$，$m \le 10$。<br>对于 $70%$ 的数据：$n \le {10}^3$，$m \le {10}^4$。<br>对于 $100%$ 的数据：$1 \le n, m \le {10}^5$。</p>
<p>保证任意时刻数列中所有元素的绝对值之和 $\le {10}^{18}$。</p>
<p><strong>【样例解释】</strong></p>
<p><img src="https://cdn.luogu.com.cn/upload/pic/2251.png"></p>
<h1 id="代码与注释"><a href="#代码与注释" class="headerlink" title="代码与注释"></a>代码与注释</h1><p><strong>线段树的区间修改与查询，不多解释</strong></p>
<p><strong>代码中point_add是单点修改 ，range_add是区间修改</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LC pos * 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC pos * 2 + 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> left, right, val, add;</span><br><span class="line">&#125; tree[N * <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[pos].val = tree[LC].val + tree[RC].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[pos].add)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[LC].val += tree[pos].add * (tree[LC].right - tree[LC].left + <span class="number">1</span>);</span><br><span class="line">        tree[RC].val += tree[pos].add * (tree[RC].right - tree[RC].left + <span class="number">1</span>);</span><br><span class="line">        tree[LC].add += tree[pos].add;</span><br><span class="line">        tree[RC].add += tree[pos].add;</span><br><span class="line">        tree[pos].add = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[pos].left = left, tree[pos].right = right;</span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].val = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(LC, left, mid);</span><br><span class="line">    <span class="built_in">build</span>(RC, mid + <span class="number">1</span>, right);</span><br><span class="line">    <span class="built_in">push_up</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">point_add</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> x, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = tree[pos].left, right = tree[pos].right;</span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].val += val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        <span class="built_in">point_add</span>(LC, x, val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">point_add</span>(RC, x, val);</span><br><span class="line">    <span class="built_in">push_up</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">range_add</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].val += val * (tree[pos].right - tree[pos].left + <span class="number">1</span>);</span><br><span class="line">        tree[pos].add += val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (tree[pos].left + tree[pos].right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &lt;= mid)</span><br><span class="line">        <span class="built_in">range_add</span>(LC, left, right, val);</span><br><span class="line">    <span class="keyword">if</span> (right &gt; mid)</span><br><span class="line">        <span class="built_in">range_add</span>(RC, left, right, val);</span><br><span class="line">    <span class="built_in">push_up</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">range_ask</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right)</span><br><span class="line">        <span class="keyword">return</span> tree[pos].val;</span><br><span class="line">    <span class="type">int</span> mid = (tree[pos].left + tree[pos].right) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &lt;= mid)</span><br><span class="line">        ans += <span class="built_in">range_ask</span>(LC, left, right);</span><br><span class="line">    <span class="keyword">if</span> (right &gt; mid)</span><br><span class="line">        ans += <span class="built_in">range_ask</span>(RC, left, right);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 操，真特么</span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> op = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = <span class="built_in">read</span>(), y = <span class="built_in">read</span>(), k = <span class="built_in">read</span>();</span><br><span class="line">            <span class="built_in">range_add</span>(<span class="number">1</span>, x, y, k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x = <span class="built_in">read</span>(), y = <span class="built_in">read</span>();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">range_ask</span>(<span class="number">1</span>, x, y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
</search>
