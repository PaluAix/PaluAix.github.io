<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FHQ_Treap非指针模板</title>
    <url>/posts/63159.html</url>
    <content><![CDATA[<h1 id="【模板】普通平衡树"><a href="#【模板】普通平衡树" class="headerlink" title="【模板】普通平衡树"></a>【模板】普通平衡树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>您需要写一种数据结构（可参考题目标题），来维护一些数，其中需要提供以下操作：</p>
<ol>
<li>插入 $x$ 数</li>
<li>删除 $x$ 数(若有多个相同的数，应只删除一个)</li>
<li>查询 $x$ 数的排名(排名定义为比当前数小的数的个数 $+1$ )</li>
<li>查询排名为 $x$ 的数</li>
<li>求 $x$ 的前驱(前驱定义为小于 $x$，且最大的数)</li>
<li>求 $x$ 的后继(后继定义为大于 $x$，且最小的数)</li>
</ol>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行为 $n$，表示操作的个数,下面 $n$ 行每行有两个数 $\text{opt}$ 和 $x$，$\text{opt}$ 表示操作的序号( $ 1 \leq \text{opt} \leq 6 $ )</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于操作 $3,4,5,6$ 每行输出一个数，表示对应答案</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">1 106465</span><br><span class="line">4 1</span><br><span class="line">1 317721</span><br><span class="line">1 460929</span><br><span class="line">1 644985</span><br><span class="line">1 84185</span><br><span class="line">1 89851</span><br><span class="line">6 81968</span><br><span class="line">1 492737</span><br><span class="line">5 493598</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">106465</span><br><span class="line">84185</span><br><span class="line">492737</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【数据范围】<br>对于 $100%$ 的数据，$1\le n \le 10^5$，$|x| \le 10^7$</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LC(p) t[p].c[0]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC(p) t[p].c[1]</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FHQ_Treap</span> &#123;</span><br><span class="line">  <span class="type">int</span> val, size, dat, cnt, c[<span class="number">2</span>];</span><br><span class="line">&#125; t[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tot, root, a, b, c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123; t[p].size = t[<span class="built_in">LC</span>(p)].size + t[<span class="built_in">RC</span>(p)].size + <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Split</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k, <span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!p) &#123;</span><br><span class="line">    a = b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (t[p].val &lt;= k) &#123;</span><br><span class="line">    a = p;</span><br><span class="line">    <span class="built_in">Split</span>(<span class="built_in">RC</span>(p), k, <span class="built_in">RC</span>(p), b);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    b = p;</span><br><span class="line">    <span class="built_in">Split</span>(<span class="built_in">LC</span>(p), k, a, <span class="built_in">LC</span>(p));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Push</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line">  <span class="keyword">if</span> (t[x].dat &lt;= t[y].dat) &#123;</span><br><span class="line">    <span class="built_in">RC</span>(x) = <span class="built_in">Merge</span>(<span class="built_in">RC</span>(x), y);</span><br><span class="line">    <span class="built_in">Push</span>(x);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">LC</span>(y) = <span class="built_in">Merge</span>(x, <span class="built_in">LC</span>(y));</span><br><span class="line">    <span class="built_in">Push</span>(y);</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Insert</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">  t[++tot].val = k;</span><br><span class="line">  t[tot].size = <span class="number">1</span>;</span><br><span class="line">  t[tot].dat = <span class="built_in">rand</span>();</span><br><span class="line">  <span class="built_in">Split</span>(root, k, a, b);</span><br><span class="line">  root = <span class="built_in">Merge</span>(<span class="built_in">Merge</span>(a, tot), b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Remove</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Split</span>(root, k, a, b);</span><br><span class="line">  <span class="built_in">Split</span>(a, k - <span class="number">1</span>, a, c);</span><br><span class="line">  c = <span class="built_in">Merge</span>(<span class="built_in">LC</span>(c), <span class="built_in">RC</span>(c));</span><br><span class="line">  root = <span class="built_in">Merge</span>(<span class="built_in">Merge</span>(a, c), b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetRank</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Split</span>(root, k - <span class="number">1</span>, a, b);</span><br><span class="line">  <span class="type">int</span> ans = t[a].size + <span class="number">1</span>;</span><br><span class="line">  root = <span class="built_in">Merge</span>(a, b);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetVal</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (k == t[<span class="built_in">LC</span>(p)].size + <span class="number">1</span>) <span class="keyword">return</span> t[p].val;</span><br><span class="line">  <span class="keyword">if</span> (k &lt;= t[<span class="built_in">LC</span>(p)].size)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">GetVal</span>(<span class="built_in">LC</span>(p), k);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">GetVal</span>(<span class="built_in">RC</span>(p), k - t[<span class="built_in">LC</span>(p)].size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pre</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">GetVal</span>(root, <span class="built_in">GetRank</span>(p) - <span class="number">1</span>); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Nex</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">GetVal</span>(root, <span class="built_in">GetRank</span>(p + <span class="number">1</span>)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">    <span class="type">int</span> opt, k;</span><br><span class="line">    cin &gt;&gt; opt &gt;&gt; k;</span><br><span class="line">    <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">Insert</span>(k);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">Remove</span>(k);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        cout &lt;&lt; <span class="built_in">GetRank</span>(k) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        cout &lt;&lt; <span class="built_in">GetVal</span>(root, k) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        cout &lt;&lt; <span class="built_in">Pre</span>(k) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        cout &lt;&lt; <span class="built_in">Nex</span>(k) &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>码风自认为最好看的一次（笑</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>洛谷P3374的线段树解法</title>
    <url>/posts/2.html</url>
    <content><![CDATA[<h1 id="P3374"><a href="#P3374" class="headerlink" title="P3374"></a>P3374</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ul>
<li><p>将某一个数加上 $x$</p>
</li>
<li><p>求出某区间每一个数的和</p>
</li>
</ul>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含两个正整数 $n,m$，分别表示该数列数字的个数和操作的总个数。   </p>
<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>
<p>接下来 $m$ 行每行包含 $3$ 个整数，表示一个操作，具体如下：</p>
<ul>
<li><p><code>1 x k</code>  含义：将第 $x$ 个数加上 $k$</p>
</li>
<li><p><code>2 x y</code>  含义：输出区间 $[x,y]$ 内每个数的和</p>
</li>
</ul>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包含若干行整数，即为所有操作 $2$ 的结果。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 5 4 2 3</span><br><span class="line">1 1 3</span><br><span class="line">2 2 5</span><br><span class="line">1 3 -1</span><br><span class="line">1 4 2</span><br><span class="line">2 1 4</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">14</span><br><span class="line">16</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【数据范围】</p>
<p>对于 $30%$ 的数据，$1 \le n \le 8$，$1\le m \le 10$；<br>对于 $70%$ 的数据，$1\le n,m \le 10^4$；<br>对于 $100%$ 的数据，$1\le n,m \le 5\times 10^5$。</p>
<p>数据保证对于任意时刻，$a$ 的任意子区间（包括长度为 $1$ 和 $n$ 的子区间）和均在 $[-2^{31}, 2^{31})$ 范围内。</p>
<p>样例说明：</p>
<p> <img src="https://cdn.luogu.com.cn/upload/pic/2256.png"> </p>
<p>故输出结果14、16</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><strong>很明显，这是一道树状数组的模板题，但由于某神奇原因无法AC，故使用线段树来解。</strong></p>
<p>AC代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LC pos * 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC pos * 2 + 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> left, right, val;</span><br><span class="line">&#125; tree[N * <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[pos].left = left;</span><br><span class="line">    tree[pos].right = right;</span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].val = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(LC, left, mid);</span><br><span class="line">    <span class="built_in">build</span>(RC, mid + <span class="number">1</span>, right);</span><br><span class="line">    tree[pos].val = tree[LC].val + tree[RC].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">point_add</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> x, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> left = tree[pos].left, right = tree[pos].right;</span><br><span class="line">    <span class="keyword">if</span> (left == right)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[pos].val += v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        <span class="built_in">point_add</span>(LC, x, v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">point_add</span>(RC, x, v);</span><br><span class="line">    tree[pos].val = tree[LC].val + tree[RC].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right)</span><br><span class="line">        <span class="keyword">return</span> tree[pos].val;</span><br><span class="line">    <span class="type">int</span> mid = (tree[pos].left + tree[pos].right) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &lt;= mid)</span><br><span class="line">        ans += <span class="built_in">ask</span>(LC, left, right);</span><br><span class="line">    <span class="keyword">if</span> (right &gt; mid)</span><br><span class="line">        ans += <span class="built_in">ask</span>(RC, left, right);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">read</span>(), a = <span class="built_in">read</span>(), b = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">point_add</span>(<span class="number">1</span>, a, b);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">ask</span>(<span class="number">1</span>, a, b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/bvm7mvcf.png" alt="AC"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>没有上司的舞会</title>
    <url>/posts/53013.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>线段树区间乘法模板</title>
    <url>/posts/5.html</url>
    <content><![CDATA[<h1 id="【模板】线段树-2"><a href="#【模板】线段树-2" class="headerlink" title="【模板】线段树 2"></a>【模板】线段树 2</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>如题，已知一个数列，你需要进行下面三种操作：</p>
<ul>
<li>将某区间每一个数乘上 $x$；</li>
<li>将某区间每一个数加上 $x$；</li>
<li>求出某区间每一个数的和。</li>
</ul>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含三个整数 $n,q,m$，分别表示该数列数字的个数、操作的总个数和模数。</p>
<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>
<p>接下来 $q$ 行每行包含若干个整数，表示一个操作，具体如下：</p>
<p>操作 $1$： 格式：<code>1 x y k</code>  含义：将区间 $[x,y]$ 内每个数乘上 $k$</p>
<p>操作 $2$： 格式：<code>2 x y k</code>  含义：将区间 $[x,y]$ 内每个数加上 $k$</p>
<p>操作 $3$： 格式：<code>3 x y</code>  含义：输出区间 $[x,y]$ 内每个数的和对 $m$ 取模所得的结果</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包含若干行整数，即为所有操作 $3$ 的结果。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5 38</span><br><span class="line">1 5 4 2 3</span><br><span class="line">2 1 4 1</span><br><span class="line">3 2 5</span><br><span class="line">1 2 4 2</span><br><span class="line">2 3 5 5</span><br><span class="line">3 1 4</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">17</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【数据范围】</p>
<p>对于 $30%$ 的数据：$n \le 8$，$q \le 10$。<br>对于 $70%$ 的数据：$n \le 10^3 $，$q \le 10^4$。<br>对于 $100%$ 的数据：$1 \le n \le 10^5$，$1 \le q \le 10^5$。</p>
<p>除样例外，$m &#x3D; 571373$。</p>
<p>（数据已经过加强 ^_^）</p>
<p>样例说明：</p>
<p> <img src="https://cdn.luogu.com.cn/upload/pic/2255.png"> </p>
<p>故输出应为 $17$、$2$（$40 \bmod 38 &#x3D; 2$）。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> L pos * 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R pos * 2 + 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> mod, q, n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">  <span class="type">int</span> l, r, val;</span><br><span class="line">  <span class="type">int</span> add, mul;</span><br><span class="line">&#125; t[N * <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">  <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line">    c = <span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">    x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    c = <span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">  t[pos].val = (t[L].val + t[R].val) % mod;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">  t[L].val = (t[L].val * t[pos].mul + t[pos].add * (t[L].r - t[L].l + <span class="number">1</span>)) % mod;</span><br><span class="line">  t[R].val = (t[R].val * t[pos].mul + t[pos].add * (t[R].r - t[R].l + <span class="number">1</span>)) % mod;</span><br><span class="line">  t[L].mul = (t[L].mul * t[pos].mul) % mod;</span><br><span class="line">  t[R].mul = (t[R].mul * t[pos].mul) % mod;</span><br><span class="line">  t[L].add = (t[L].add * t[pos].mul + t[pos].add) % mod;</span><br><span class="line">  t[R].add = (t[R].add * t[pos].mul + t[pos].add) % mod;</span><br><span class="line">  t[pos].add = <span class="number">0</span>;</span><br><span class="line">  t[pos].mul = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  t[pos].l = l;</span><br><span class="line">  t[pos].r = r;</span><br><span class="line">  t[pos].mul = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    t[pos].val = <span class="built_in">read</span>() % mod;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">build</span>(L, l, mid);</span><br><span class="line">  <span class="built_in">build</span>(R, mid + <span class="number">1</span>, r);</span><br><span class="line">  <span class="built_in">push_up</span>(pos);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">range_mul</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (t[pos].l &gt;= l &amp;&amp; t[pos].r &lt;= r) &#123;</span><br><span class="line">    t[pos].add = (t[pos].add * v) % mod;</span><br><span class="line">    t[pos].mul = (t[pos].mul * v) % mod;</span><br><span class="line">    t[pos].val = (t[pos].val * v) % mod;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">push_down</span>(pos);</span><br><span class="line">  <span class="type">int</span> mid = (t[pos].l + t[pos].r) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">range_mul</span>(L, l, r, v);</span><br><span class="line">  <span class="keyword">if</span> (r &gt; mid) <span class="built_in">range_mul</span>(R, l, r, v);</span><br><span class="line">  <span class="built_in">push_up</span>(pos);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">range_add</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (t[pos].l &gt;= l &amp;&amp; t[pos].r &lt;= r) &#123;</span><br><span class="line">    t[pos].val = (t[pos].val + v * (t[pos].r - t[pos].l + <span class="number">1</span>)) % mod;</span><br><span class="line">    t[pos].add = (t[pos].add + v) % mod;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">push_down</span>(pos);</span><br><span class="line">  <span class="type">int</span> mid = (t[pos].l + t[pos].r) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= mid) <span class="built_in">range_add</span>(L, l, r, v);</span><br><span class="line">  <span class="keyword">if</span> (r &gt; mid) <span class="built_in">range_add</span>(R, l, r, v);</span><br><span class="line">  <span class="built_in">push_up</span>(pos);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">range_ask</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (t[pos].l &gt;= l &amp;&amp; t[pos].r &lt;= r) <span class="keyword">return</span> t[pos].val;</span><br><span class="line">  <span class="built_in">push_down</span>(pos);</span><br><span class="line">  <span class="type">int</span> mid = (t[pos].l + t[pos].r) / <span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (l &lt;= mid) ans = (ans + <span class="built_in">range_ask</span>(L, l, r)) % mod;</span><br><span class="line">  <span class="keyword">if</span> (r &gt; mid) ans = (ans + <span class="built_in">range_ask</span>(R, l, r)) % mod;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  n = <span class="built_in">read</span>(), q = <span class="built_in">read</span>(), mod = <span class="built_in">read</span>();</span><br><span class="line">  <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">    <span class="type">int</span> op = <span class="built_in">read</span>(), a = <span class="built_in">read</span>(), b = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="type">int</span> v = <span class="built_in">read</span>();</span><br><span class="line">      <span class="built_in">range_mul</span>(<span class="number">1</span>, a, b, v);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="type">int</span> v = <span class="built_in">read</span>();</span><br><span class="line">      <span class="built_in">range_add</span>(<span class="number">1</span>, a, b, v);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">range_ask</span>(<span class="number">1</span>, a, b));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>线段树区间修改模板</title>
    <url>/posts/4.html</url>
    <content><![CDATA[<h1 id="【模板】线段树"><a href="#【模板】线段树" class="headerlink" title="【模板】线段树"></a>【模板】线段树</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ol>
<li>将某区间每一个数加上 $k$。</li>
<li>求出某区间每一个数的和。</li>
</ol>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含两个整数 $n, m$，分别表示该数列数字的个数和操作的总个数。</p>
<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>
<p>接下来 $m$ 行每行包含 $3$ 或 $4$ 个整数，表示一个操作，具体如下：</p>
<ol>
<li><code>1 x y k</code>：将区间 $[x, y]$ 内每个数加上 $k$。</li>
<li><code>2 x y</code>：输出区间 $[x, y]$ 内每个数的和。</li>
</ol>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包含若干行整数，即为所有操作 2 的结果。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 5 4 2 3</span><br><span class="line">2 2 4</span><br><span class="line">1 2 3 2</span><br><span class="line">2 3 4</span><br><span class="line">1 1 5 1</span><br><span class="line">2 1 4</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">11</span><br><span class="line">8</span><br><span class="line">20</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $30%$ 的数据：$n \le 8$，$m \le 10$。<br>对于 $70%$ 的数据：$n \le {10}^3$，$m \le {10}^4$。<br>对于 $100%$ 的数据：$1 \le n, m \le {10}^5$。</p>
<p>保证任意时刻数列中所有元素的绝对值之和 $\le {10}^{18}$。</p>
<p><strong>【样例解释】</strong></p>
<p><img src="https://cdn.luogu.com.cn/upload/pic/2251.png"></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><strong>线段树的区间修改与查询</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LC pos * 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC pos * 2 + 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">  <span class="type">int</span> left, right, val, lazy;</span><br><span class="line">&#125; tree[N * <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">  <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line">    c = <span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">    x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    c = <span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123; tree[pos].val = tree[LC].val + tree[RC].val; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (tree[pos].lazy) &#123;</span><br><span class="line">    tree[LC].val += tree[pos].lazy * (tree[LC].right - tree[LC].left + <span class="number">1</span>);</span><br><span class="line">    tree[RC].val += tree[pos].lazy * (tree[RC].right - tree[RC].left + <span class="number">1</span>);</span><br><span class="line">    tree[LC].lazy += tree[pos].lazy;</span><br><span class="line">    tree[RC].lazy += tree[pos].lazy;</span><br><span class="line">    tree[pos].lazy = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">  tree[pos].left = left, tree[pos].right = right;</span><br><span class="line">  <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">    tree[pos].val = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">build</span>(LC, left, mid);</span><br><span class="line">  <span class="built_in">build</span>(RC, mid + <span class="number">1</span>, right);</span><br><span class="line">  <span class="built_in">push_up</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">range_add</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right) &#123;</span><br><span class="line">    tree[pos].val += val * (tree[pos].right - tree[pos].left + <span class="number">1</span>);</span><br><span class="line">    tree[pos].lazy += val;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">push_down</span>(pos);</span><br><span class="line">  <span class="type">int</span> mid = (tree[pos].left + tree[pos].right) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (left &lt;= mid) <span class="built_in">range_add</span>(LC, left, right, val);</span><br><span class="line">  <span class="keyword">if</span> (right &gt; mid) <span class="built_in">range_add</span>(RC, left, right, val);</span><br><span class="line">  <span class="built_in">push_up</span>(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">range_ask</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (tree[pos].left &gt;= left &amp;&amp; tree[pos].right &lt;= right) <span class="keyword">return</span> tree[pos].val;</span><br><span class="line">  <span class="built_in">push_down</span>(pos);</span><br><span class="line">  <span class="type">int</span> mid = (tree[pos].left + tree[pos].right) / <span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (left &lt;= mid) ans += <span class="built_in">range_ask</span>(LC, left, right);</span><br><span class="line">  <span class="keyword">if</span> (right &gt; mid) ans += <span class="built_in">range_ask</span>(RC, left, right);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n = <span class="built_in">read</span>(), q = <span class="built_in">read</span>();</span><br><span class="line">  <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">    <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;op);</span><br><span class="line">    <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">      <span class="type">int</span> a = <span class="built_in">read</span>(), b = <span class="built_in">read</span>(), c = <span class="built_in">read</span>();</span><br><span class="line">      <span class="built_in">range_add</span>(<span class="number">1</span>, a, b, c);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="type">int</span> a = <span class="built_in">read</span>(), b = <span class="built_in">read</span>();</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">range_ask</span>(<span class="number">1</span>, a, b));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>花神游历各国</title>
    <url>/posts/7.html</url>
    <content><![CDATA[<h1 id="花神游历各国"><a href="#花神游历各国" class="headerlink" title="花神游历各国"></a>花神游历各国</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>花神喜欢步行游历各国，顺便虐爆各地竞赛花神有一条游览路线，它是线型的，也就是说，所有游历国家呈一条线的形状排列，花神对每个国家都有一个喜欢程度（当然花神并不一定喜欢所有国家），每一次旅行中，花神会选择一条旅游路线，它在那一串国家中是连续的一段，这次旅行带来的开心值是这些国家的喜欢度的总和当然花神对这些国家的喜欢程度并不是恒定的，有时会突然对某些国家产生反感，使他对这些国家的喜欢度 $delta$ 变为 $\sqrt{delta}$，也就是开根号（可能是花神虐爆了那些国家的 OI，从而感到乏味），现在给出花神每次的旅行路线，以及开心度的变化，请求出花神每次旅行的开心值。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行是一个整数 $N$ 表示有 $N$ 个国家。<br>第二行有 $N$ 个空格隔开的整数，表示每个国家的初始喜欢度  $data_i$。<br>第三行是一个整数 $M$ 表示有 $M$ 条信息要处理。<br>第四行到最后,每行 $3$ 个整数，$x$，$l$，$r$，$ ( l \le r ) $。当 $x&#x3D;1$ 时询问游历国家 $l$ 到 $r$ 的开心值总和，也就是 $\sum_{i&#x3D;l}^{r} data_i$；当 $x&#x3D;2$ 是国家 $l$ 到 $r$ 中每个国家的喜欢度 $delta &#x3D; \sqrt{delta}$。<br>注：建议使用sqrt函数，且向下取整。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>每次 $x&#x3D;1$ 时，每行一个整数，表示这次旅行的开心度。</p>
<h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 100 5 5</span><br><span class="line">5</span><br><span class="line">1 1 2</span><br><span class="line">2 1 2</span><br><span class="line">1 1 2</span><br><span class="line">2 2 3</span><br><span class="line">1 1 4</span><br></pre></td></tr></table></figure>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">101</span><br><span class="line">11</span><br><span class="line">11</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100%$ 的数据：$n \le 100000$，$m \le 200000$，$data_i$ 非负且小于 $10^9$。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><blockquote>
<p>线段树单点修改变式</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LC p &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RC p &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="comment">//const int N = 1e5 + 5; 艹，这数据绝对有问题,1e5过不去1e6就能了，题目描述不是是n&lt;=10^5吗？？？</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">IN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">  <span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line">    c = <span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">    x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    c = <span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree25</span> &#123;</span><br><span class="line">  <span class="type">int</span> val, l, r;</span><br><span class="line">&#125; t[N * <span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> ma[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PushUp</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">  t[p].val = t[LC].val + t[RC].val;</span><br><span class="line">  ma[p] = <span class="built_in">max</span>(ma[LC], ma[RC]);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    t[p].val = ma[p] = <span class="built_in">IN</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">Build</span>(LC, l, mid);</span><br><span class="line">  <span class="built_in">Build</span>(RC, mid + <span class="number">1</span>, r);</span><br><span class="line">  <span class="built_in">PushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ma[p] == <span class="number">1</span> || ma[p] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    ma[p] = t[p].val = <span class="built_in">sqrt</span>(t[p].val);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= mid) <span class="built_in">Update</span>(LC, l, mid, x, y);</span><br><span class="line">  <span class="keyword">if</span> (mid &lt; y) <span class="built_in">Update</span>(RC, mid + <span class="number">1</span>, r, x, y);</span><br><span class="line">  <span class="built_in">PushUp</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ask</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= l &amp;&amp; r &lt;= y) <span class="keyword">return</span> t[p].val;</span><br><span class="line">  <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (x &lt;= mid) res += <span class="built_in">Ask</span>(LC, l, mid, x, y);</span><br><span class="line">  <span class="keyword">if</span> (y &gt; mid) res += <span class="built_in">Ask</span>(RC, mid + <span class="number">1</span>, r, x, y);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> n = <span class="built_in">IN</span>();</span><br><span class="line">  <span class="built_in">Build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">  <span class="type">int</span> q = <span class="built_in">IN</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= q; i++) &#123;</span><br><span class="line">    <span class="type">int</span> op = <span class="built_in">IN</span>(), a = <span class="built_in">IN</span>(), b = <span class="built_in">IN</span>();</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">      cout &lt;&lt; <span class="built_in">Ask</span>(<span class="number">1</span>, <span class="number">1</span>, n, a, b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">Update</span>(<span class="number">1</span>, <span class="number">1</span>, n, a, b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
</search>
